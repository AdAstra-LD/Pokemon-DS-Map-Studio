/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.buildingeditor;

import editor.handler.MapEditorHandler;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import utils.Utils;

/**
 *
 * @author Trifindo
 */
public class BuildingEditorDialog extends javax.swing.JDialog {

    private MapEditorHandler handler;
    private BuildHandler buildHandler;

    private boolean jlBuildingIDsEnabled = true;

    private boolean firstRemovedBuilding = true;

    /**
     * Creates new form BuildingEditorDialog
     */
    public BuildingEditorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlMaterialOrder = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlBuildingIDs = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jbMoveUp = new javax.swing.JButton();
        jbMoveDown = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jbOpenMatshp = new javax.swing.JButton();
        jbSaveMatshp = new javax.swing.JButton();
        jbBmmAddBuilding = new javax.swing.JButton();
        jbBmmReplaceBuilding = new javax.swing.JButton();
        jbBmmRemoveBuilding = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlBuildTilesetList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jbOpenBuilTilesetList = new javax.swing.JButton();
        jbSaveBuildTilesetList = new javax.swing.JButton();
        jbAddBuildingTbl = new javax.swing.JButton();
        jbReplaceBuildingTbl = new javax.swing.JButton();
        jbRemoveBuildingTbl = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Building Editor");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Building Materials (build_model_matshp.dat)"));

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jlMaterialOrder.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(jlMaterialOrder);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setToolTipText("");
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jlBuildingIDs.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlBuildingIDs.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlBuildingIDsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlBuildingIDs);

        jLabel1.setText("Building List:");

        jLabel2.setText("Material order:");

        jbMoveUp.setText("▲");
        jbMoveUp.setEnabled(false);
        jbMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveUpActionPerformed(evt);
            }
        });

        jbMoveDown.setText("▼");
        jbMoveDown.setEnabled(false);
        jbMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveDownActionPerformed(evt);
            }
        });

        jLabel3.setText("Move Material:");

        jbOpenMatshp.setText("Open Matshp...");
        jbOpenMatshp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOpenMatshpActionPerformed(evt);
            }
        });

        jbSaveMatshp.setText("Save Matshp...");
        jbSaveMatshp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveMatshpActionPerformed(evt);
            }
        });

        jbBmmAddBuilding.setText("Add Building...");
        jbBmmAddBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBmmAddBuildingActionPerformed(evt);
            }
        });

        jbBmmReplaceBuilding.setText("Replace Building...");
        jbBmmReplaceBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBmmReplaceBuildingActionPerformed(evt);
            }
        });

        jbBmmRemoveBuilding.setText("Remove Building...");
        jbBmmRemoveBuilding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBmmRemoveBuildingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbMoveUp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbMoveDown))
                            .addComponent(jbBmmReplaceBuilding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbOpenMatshp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbSaveMatshp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbBmmAddBuilding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbBmmRemoveBuilding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbOpenMatshp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSaveMatshp)
                        .addGap(18, 18, 18)
                        .addComponent(jbBmmAddBuilding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbBmmReplaceBuilding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbBmmRemoveBuilding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbMoveUp)
                            .addComponent(jbMoveDown)))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Tileset Building List (area_build.narc files)"));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setToolTipText("");
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jlBuildTilesetList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jlBuildTilesetList);

        jLabel4.setText("Buildings used in tileset:");

        jbOpenBuilTilesetList.setText("Open List...");
        jbOpenBuilTilesetList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOpenBuilTilesetListActionPerformed(evt);
            }
        });

        jbSaveBuildTilesetList.setText("Save List...");
        jbSaveBuildTilesetList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveBuildTilesetListActionPerformed(evt);
            }
        });

        jbAddBuildingTbl.setText("Add Building...");
        jbAddBuildingTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddBuildingTblActionPerformed(evt);
            }
        });

        jbReplaceBuildingTbl.setText("Replace Building...");
        jbReplaceBuildingTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReplaceBuildingTblActionPerformed(evt);
            }
        });

        jbRemoveBuildingTbl.setText("Remove Building...");
        jbRemoveBuildingTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveBuildingTblActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbAddBuildingTbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbSaveBuildTilesetList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbOpenBuilTilesetList, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbReplaceBuildingTbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbRemoveBuildingTbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jbOpenBuilTilesetList)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSaveBuildTilesetList)
                        .addGap(18, 18, 18)
                        .addComponent(jbAddBuildingTbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbReplaceBuildingTbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRemoveBuildingTbl)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("Building Editor - Experimental! Use with caution!");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveDownActionPerformed

    }//GEN-LAST:event_jbMoveDownActionPerformed

    private void jbMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveUpActionPerformed

    }//GEN-LAST:event_jbMoveUpActionPerformed

    private void jbOpenMatshpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOpenMatshpActionPerformed
        openMatshpWithDialog();


    }//GEN-LAST:event_jbOpenMatshpActionPerformed

    private void jlBuildingIDsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlBuildingIDsValueChanged
        if (jlBuildingIDsEnabled) {
            updateViewMaterialOrder();
        }
    }//GEN-LAST:event_jlBuildingIDsValueChanged

    private void jbBmmAddBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBmmAddBuildingActionPerformed
        if (buildHandler.getBuildModelMatshp() != null) {
            addBuildingBmmWithDialog();
        }
    }//GEN-LAST:event_jbBmmAddBuildingActionPerformed

    private void jbBmmReplaceBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBmmReplaceBuildingActionPerformed
        if (buildHandler.getBuildModelMatshp() != null) {
            replaceBuildingBmmWithDialog();
        }
    }//GEN-LAST:event_jbBmmReplaceBuildingActionPerformed

    private void jbBmmRemoveBuildingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBmmRemoveBuildingActionPerformed
        if (buildHandler.getBuildModelMatshp() != null) {
            removeBuildingBmm();
        }
    }//GEN-LAST:event_jbBmmRemoveBuildingActionPerformed

    private void jbSaveMatshpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveMatshpActionPerformed
        if (buildHandler.getBuildModelMatshp() != null) {
            saveMatshpWithDialog();
        }
    }//GEN-LAST:event_jbSaveMatshpActionPerformed

    private void jbOpenBuilTilesetListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOpenBuilTilesetListActionPerformed
        openTilesetListWithDialog();
    }//GEN-LAST:event_jbOpenBuilTilesetListActionPerformed

    private void jbAddBuildingTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddBuildingTblActionPerformed
        if (buildHandler.getBuildTilesetList() != null) {
            addBuildingTblWithDialog();
        }
    }//GEN-LAST:event_jbAddBuildingTblActionPerformed

    private void jbReplaceBuildingTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReplaceBuildingTblActionPerformed
        if (buildHandler.getBuildTilesetList() != null) {
            replaceBuildingTblWithDialog();
        }
    }//GEN-LAST:event_jbReplaceBuildingTblActionPerformed

    private void jbRemoveBuildingTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveBuildingTblActionPerformed
        if (buildHandler.getBuildTilesetList() != null) {
            removeBuildingTbl();
        }
    }//GEN-LAST:event_jbRemoveBuildingTblActionPerformed

    private void jbSaveBuildTilesetListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveBuildTilesetListActionPerformed
        if (buildHandler.getBuildTilesetList() != null) {
            saveBtlWithDialog();
        }
    }//GEN-LAST:event_jbSaveBuildTilesetListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuildingEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuildingEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuildingEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuildingEditorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BuildingEditorDialog dialog = new BuildingEditorDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbAddBuildingTbl;
    private javax.swing.JButton jbBmmAddBuilding;
    private javax.swing.JButton jbBmmRemoveBuilding;
    private javax.swing.JButton jbBmmReplaceBuilding;
    private javax.swing.JButton jbMoveDown;
    private javax.swing.JButton jbMoveUp;
    private javax.swing.JButton jbOpenBuilTilesetList;
    private javax.swing.JButton jbOpenMatshp;
    private javax.swing.JButton jbRemoveBuildingTbl;
    private javax.swing.JButton jbReplaceBuildingTbl;
    private javax.swing.JButton jbSaveBuildTilesetList;
    private javax.swing.JButton jbSaveMatshp;
    private javax.swing.JList<String> jlBuildTilesetList;
    private javax.swing.JList<String> jlBuildingIDs;
    private javax.swing.JList<String> jlMaterialOrder;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler) {
        this.handler = handler;
        this.buildHandler = new BuildHandler();

    }

    public void openMatshpWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastBuildDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastBuildDirectoryUsed()));
        }
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Open Build Model Matshp File");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastBuildDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                buildHandler.loadBuildModelMashup(fc.getSelectedFile().getPath());

                updateViewBmm();
                updateViewMaterialOrder();

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't open file.",
                        "Error opening file", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void openTilesetListWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastBuildDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastBuildDirectoryUsed()));
        }
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Open Build Tileset List");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastBuildDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                buildHandler.loadBuildTilesetList(fc.getSelectedFile().getPath());
                updateViewBtl();

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't open file.",
                        "Error opening file", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void saveMatshpWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastBuildDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastBuildDirectoryUsed()));
        }
        fc.setApproveButtonText("Save");
        fc.setDialogTitle("Save Build Model Matshp File");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastBuildDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                String path = fc.getSelectedFile().getPath();
                path = Utils.addExtensionToPath(path, "dat");

                buildHandler.getBuildModelMatshp().saveToFile(path);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't save file.",
                        "Error saving Build Model Matshp File", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void saveBtlWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastBuildDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastBuildDirectoryUsed()));
        }
        fc.setApproveButtonText("Save");
        fc.setDialogTitle("Save Build Tile List");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastBuildDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                String path = fc.getSelectedFile().getPath();

                buildHandler.getBuildTilesetList().saveToFile(path);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't save file.",
                        "Error saving Building Tileset List", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void updateViewBmm() {
        updateViewBmm(0);
    }

    public void updateViewBmm(int indexSelected) {

        System.out.println("Index selected: " + indexSelected);
        jlBuildingIDsEnabled = false;
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < buildHandler.getBuildModelMatshp().getAllMaterials().size(); i++) {
            String name = "Building " + String.format("%03d", i);
            demoList.addElement(name);
        }
        jlBuildingIDs.setModel(demoList);
        jlBuildingIDs.setSelectedIndex(indexSelected);
        jlBuildingIDs.ensureIndexIsVisible(indexSelected);
        jlBuildingIDsEnabled = true;
        //jlBuildingIDs.ensureIndexIsVisible(indexSelected);
    }

    public void updateViewMaterialOrder() {
        DefaultListModel demoList = new DefaultListModel();
        int buildingSelected = jlBuildingIDs.getSelectedIndex();
        ArrayList<Integer> materials = buildHandler.getBuildModelMatshp().getMaterials(buildingSelected);
        if (materials != null) {
            for (int i = 0; i < materials.size(); i++) {
                String name = "Material " + materials.get(i);
                demoList.addElement(name);
            }
        } else {
            demoList.addElement("Undefined");
        }

        System.out.println("ID list index selected: " + jlBuildingIDs.getSelectedIndex());

        jlMaterialOrder.setModel(demoList);
        jlMaterialOrder.setSelectedIndex(0);
    }

    public void updateViewBtl() {
        updateViewBtl(0);
    }

    public void updateViewBtl(int indexSelected) {
        DefaultListModel demoList = new DefaultListModel();
        ArrayList<Integer> buildingIDs = buildHandler.getBuildTilesetList().getBuildingIDs();
        for (int i = 0; i < buildHandler.getBuildTilesetList().getBuildingIDs().size(); i++) {
            String name = "Building " + String.format("%03d", buildingIDs.get(i));
            demoList.addElement(name);
        }
        jlBuildTilesetList.setModel(demoList);
        jlBuildTilesetList.setSelectedIndex(indexSelected);
        jlBuildTilesetList.ensureIndexIsVisible(indexSelected);
    }

    public void addBuildingBmmWithDialog() {
        final BuildingMaterialRequestDialog dialog = new BuildingMaterialRequestDialog(handler.getMainFrame(), true);
        dialog.init("Number of materials for the Building: ", 1, 20);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (dialog.getReturnValue() == IntegerRequestDialog.ACEPTED) {
            ArrayList<Integer> newMaterials;
            if (dialog.useUndefined()) {
                newMaterials = null;
            } else {
                int nMaterials = dialog.getIntegerRequested();
                newMaterials = new ArrayList<>(nMaterials);
                for (int i = 0; i < nMaterials; i++) {
                    newMaterials.add(i);
                }
            }
            buildHandler.getBuildModelMatshp().getAllMaterials().add(newMaterials);
            updateViewBmm(buildHandler.getBuildModelMatshp().getAllMaterials().size() - 1);
            updateViewMaterialOrder();

        }
    }

    public void addBuildingTblWithDialog() {
        final IntegerRequestDialog dialog = new IntegerRequestDialog(handler.getMainFrame(), true);
        dialog.init("Enter the building ID: ", 0, 10000);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (dialog.getReturnValue() == IntegerRequestDialog.ACEPTED) {
            int buildingID = dialog.getIntegerRequested();

            if (!buildHandler.getBuildTilesetList().getBuildingIDs().contains(buildingID)) {
                buildHandler.getBuildTilesetList().getBuildingIDs().add(buildingID);
                updateViewBtl(buildHandler.getBuildTilesetList().getBuildingIDs().size() - 1);
            } else {
                JOptionPane.showMessageDialog(this, "The building already exists in the list",
                        "Repeated building", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void replaceBuildingBmmWithDialog() {
        final BuildingMaterialRequestDialog dialog = new BuildingMaterialRequestDialog(handler.getMainFrame(), true);
        dialog.init("Number of materials for the Building: ", 1, 20);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (dialog.getReturnValue() == IntegerRequestDialog.ACEPTED) {
            ArrayList<Integer> newMaterials;
            if (dialog.useUndefined()) {
                newMaterials = null;
            } else {
                int nMaterials = dialog.getIntegerRequested();
                newMaterials = new ArrayList<>(nMaterials);
                for (int i = 0; i < nMaterials; i++) {
                    newMaterials.add(i);
                }
            }
            buildHandler.getBuildModelMatshp().getAllMaterials().set(jlBuildingIDs.getSelectedIndex(), newMaterials);
            updateViewBmm(buildHandler.getBuildModelMatshp().getAllMaterials().size() - 1);
            updateViewMaterialOrder();

        }
    }

    public void replaceBuildingTblWithDialog() {
        final IntegerRequestDialog dialog = new IntegerRequestDialog(handler.getMainFrame(), true);
        dialog.init("Enter the building ID: ", 0, 10000);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (dialog.getReturnValue() == IntegerRequestDialog.ACEPTED) {
            int buildingID = dialog.getIntegerRequested();

            if (!buildHandler.getBuildTilesetList().getBuildingIDs().contains(buildingID)) {
                buildHandler.getBuildTilesetList().getBuildingIDs().set(jlBuildTilesetList.getSelectedIndex(), buildingID);
                updateViewBtl(jlBuildTilesetList.getSelectedIndex());
            } else {
                JOptionPane.showMessageDialog(this, "The building already exists in the list",
                        "Repeated building", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void removeBuildingBmm() {
        if (buildHandler.getBuildModelMatshp().getAllMaterials().size() > 1) {
            if (firstRemovedBuilding) {
                int dialogResult = JOptionPane.showConfirmDialog(null,
                        "Are you sure you want to remove the selected building?",
                        "Warning", JOptionPane.YES_NO_OPTION);
                if (dialogResult == JOptionPane.YES_OPTION) {
                    firstRemovedBuilding = false;
                } else {
                    return;
                }
            }
            int index = jlBuildingIDs.getSelectedIndex();
            buildHandler.getBuildModelMatshp().getAllMaterials().remove(index);
            if (index > 0) {
                index--;
            }
            updateViewBmm(index);
            updateViewMaterialOrder();
        } else {
            JOptionPane.showMessageDialog(this, "There must be at least 1 building",
                    "Can't remove building", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void removeBuildingTbl() {
        if (buildHandler.getBuildTilesetList().getBuildingIDs().size() > 1) {
            int index = jlBuildTilesetList.getSelectedIndex();
            buildHandler.getBuildTilesetList().getBuildingIDs().remove(index);
            if (index > 0) {
                index--;
            }
            updateViewBtl(index);
        } else {
            JOptionPane.showMessageDialog(this, "There must be at least 1 building",
                    "Can't remove building", JOptionPane.ERROR_MESSAGE);
        }
    }

}
