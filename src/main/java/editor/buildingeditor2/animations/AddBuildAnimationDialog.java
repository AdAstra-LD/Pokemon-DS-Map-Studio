/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.buildingeditor2.animations;

import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import renderer.ObjectGL;

/**
 *
 * @author Trifindo
 */
public class AddBuildAnimationDialog extends javax.swing.JDialog {

    public static final int ACEPTED = 0, CANCELED = 1;
    private int returnValue = CANCELED;
    private int indexSelected = 0;

    private byte[] buildModelData;
    private ArrayList<Integer> buildingAnimationIDs;
    private BuildAnimations buildAnimations;

    private ArrayList<Integer> animIconIndices;
    private ArrayList<ImageIcon> animIcons;

    /**
     * Creates new form AddBuildAnimationDialog
     */
    public AddBuildAnimationDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        animIcons = new ArrayList<>(4);
        animIcons.add(new ImageIcon(getClass().getResource("/icons/NsbcaIcon.png")));
        animIcons.add(new ImageIcon(getClass().getResource("/icons/NsbtaIcon.png")));
        animIcons.add(new ImageIcon(getClass().getResource("/icons/NsbtpIcon.png")));
        animIcons.add(new ImageIcon(getClass().getResource("/icons/NsbmaIcon.png")));

        animIconIndices = new ArrayList<>();

        jlAnimationsList.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);

                if (index >= 0 && index < animIconIndices.size()) {
                    int animIndex = animIconIndices.get(index);
                    if (animIndex >= 0 && animIndex < animIcons.size()) {
                        label.setIcon(animIcons.get(animIndex));
                    }
                }
                return label;
            }
        });
        
        nitroDisplayGL.getObjectsGL().add(new ObjectGL());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel12 = new javax.swing.JPanel();
        jLabel11 = new JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlAnimationsList = new JList<>();
        nitroDisplayGL = new renderer.NitroDisplayGL();
        jbAccept = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Animation");
        setResizable(false);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Building Animations (bm_anime.narc)"));

        jLabel11.setIcon(new ImageIcon(getClass().getResource("/icons/AnimationIcon.png"))); // NOI18N
        jLabel11.setText("Animations:");
        jLabel11.setToolTipText("");

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jlAnimationsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlAnimationsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlAnimationsListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jlAnimationsList);

        nitroDisplayGL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        javax.swing.GroupLayout nitroDisplayGLLayout = new javax.swing.GroupLayout(nitroDisplayGL);
        nitroDisplayGL.setLayout(nitroDisplayGLLayout);
        nitroDisplayGLLayout.setHorizontalGroup(
            nitroDisplayGLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 273, Short.MAX_VALUE)
        );
        nitroDisplayGLLayout.setVerticalGroup(
            nitroDisplayGLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nitroDisplayGL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nitroDisplayGL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE))
                .addContainerGap())
        );

        jbAccept.setText("OK");
        jbAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAcceptActionPerformed(evt);
            }
        });

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAccept)
                    .addComponent(jbCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        returnValue = CANCELED;
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jbAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAcceptActionPerformed
        if (!buildingAnimationIDs.contains(indexSelected)) {
            returnValue = ACEPTED;
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "The animation selected is already used by the building.",
                    "Can't add animation", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbAcceptActionPerformed

    private void jlAnimationsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlAnimationsListValueChanged
        indexSelected = jlAnimationsList.getSelectedIndex();

        try {
            byte[] animData = buildAnimations.getAnimations().get(indexSelected).getData();
            ObjectGL object = nitroDisplayGL.getObjectGL(0);
            object.setNsbmdData(buildModelData);
            object.setNsbca(null);
            object.setNsbta(null);
            object.setNsbtp(null);
            object.setNsbva(null);
            switch(buildAnimations.getAnimationType(indexSelected)){
                case ModelAnimation.TYPE_NSBCA:
                    object.setNsbcaData(animData);
                    break;
                case ModelAnimation.TYPE_NSBTA:
                    object.setNsbtaData(animData);
                    break;
                case ModelAnimation.TYPE_NSBTP:
                    object.setNsbtpData(animData);
                    break;
                case ModelAnimation.TYPE_NSBMA:
                    //object.setNsbData(animData);
                    break;
                case ModelAnimation.TYPE_NSBVA:
                    object.setNsbvaData(animData);
                    break;
            }
            
            nitroDisplayGL.requestUpdate();
        } catch (Exception ex) {

        }

    }//GEN-LAST:event_jlAnimationsListValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jbAccept;
    private javax.swing.JButton jbCancel;
    private JList<String> jlAnimationsList;
    private renderer.NitroDisplayGL nitroDisplayGL;
    // End of variables declaration//GEN-END:variables

    public void init(byte[] buildModelData, BuildAnimations animations, ArrayList<Integer> buildingAnimationIDs) {
        this.buildModelData = buildModelData;
        this.buildAnimations = animations;
        this.buildingAnimationIDs = buildingAnimationIDs;

        updateViewAnimationsList(0);
    }

    private void updateViewAnimationsList(int indexSelected) {
        if (buildAnimations != null) {
            ArrayList<String> names = new ArrayList<>();
            ArrayList<ModelAnimation> animations = buildAnimations.getAnimations();
            animIconIndices = new ArrayList<>(animations.size());
            for (int i = 0; i < animations.size(); i++) {
                names.add(String.valueOf(i) + ": "
                        + animations.get(i).getName() + " ["
                        + animations.get(i).getAnimationTypeName() + "]");
                animIconIndices.add(animations.get(i).getAnimationType());
            }
            addElementsToList(jlAnimationsList, names, indexSelected);
        }
    }

    private static void addElementsToList(JList list, ArrayList<String> elements, int indexSelected) {
        DefaultListModel listModel = new DefaultListModel();
        for (int i = 0; i < elements.size(); i++) {
            listModel.addElement(elements.get(i));
        }
        list.setModel(listModel);

        indexSelected = Math.max(Math.min(list.getModel().getSize() - 1, indexSelected), 0);
        list.setSelectedIndex(indexSelected);
    }

    public int getIndexSelected() {
        return indexSelected;
    }

    public int getReturnValue() {
        return returnValue;
    }
}
