/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.buildingeditor2.areabuild;

import editor.buildingeditor2.buildmodel.BuildModelList;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import renderer.ObjectGL;

/**
 *
 * @author Trifindo
 */
public class AddBuildModelDialog extends javax.swing.JDialog {

    public static final int ACEPTED = 0, CANCELED = 1;
    private int returnValue = CANCELED;
    private int indexSelected = 0;

    private BuildModelList buildings;
    //private AreaBuild areaBuild;
    private ArrayList<Integer> addedBuildings;

    private ImageIcon nsbmdIcon;

    /**
     * Creates new form AddBuildModelDialog
     */
    public AddBuildModelDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        nsbmdIcon = new ImageIcon(getClass().getResource("/icons/NsbmdIcon.png"));

        addIconToJList(jlBuildModelList, nsbmdIcon);

        nitroDisplayGL.getObjectsGL().add(new ObjectGL());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel12 = new javax.swing.JPanel();
        jLabel11 = new JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jlBuildModelList = new JList<>();
        nitroDisplayGL = new renderer.NitroDisplayGL();
        jbAccept = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Building Model");
        setResizable(false);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Building Models"));

        jLabel11.setIcon(new ImageIcon(getClass().getResource("/icons/BuildingIcon.png"))); // NOI18N
        jLabel11.setText("Building List:");
        jLabel11.setToolTipText("");

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jlBuildModelList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlBuildModelList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlBuildModelListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jlBuildModelList);

        nitroDisplayGL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        javax.swing.GroupLayout nitroDisplayGLLayout = new javax.swing.GroupLayout(nitroDisplayGL);
        nitroDisplayGL.setLayout(nitroDisplayGLLayout);
        nitroDisplayGLLayout.setHorizontalGroup(
            nitroDisplayGLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
        nitroDisplayGLLayout.setVerticalGroup(
            nitroDisplayGLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(nitroDisplayGL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nitroDisplayGL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addContainerGap())
        );

        jbAccept.setText("OK");
        jbAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAcceptActionPerformed(evt);
            }
        });

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAccept)
                    .addComponent(jbCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jlBuildModelListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlBuildModelListValueChanged
        indexSelected = jlBuildModelList.getSelectedIndex();
        try {
            byte[] data = buildings.getModelsData().get(indexSelected);
            nitroDisplayGL.getObjectGL().setNsbmdData(data);
            nitroDisplayGL.getObjectGL().setNsbca(null);
            nitroDisplayGL.getObjectGL().setNsbtp(null);
            nitroDisplayGL.getObjectGL().setNsbta(null);
            nitroDisplayGL.getObjectGL().setNsbva(null);
            nitroDisplayGL.requestUpdate();
        } catch (Exception ex) {

        }
    }//GEN-LAST:event_jlBuildModelListValueChanged

    private void jbAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAcceptActionPerformed
        if (addedBuildings != null) {
            if (!addedBuildings.contains(indexSelected)) {
                returnValue = ACEPTED;
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "The building selected is already in the list.",
                        "Can't add building", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            returnValue = ACEPTED;
            dispose();
        }
    }//GEN-LAST:event_jbAcceptActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        returnValue = CANCELED;
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jbAccept;
    private javax.swing.JButton jbCancel;
    private JList<String> jlBuildModelList;
    private renderer.NitroDisplayGL nitroDisplayGL;
    // End of variables declaration//GEN-END:variables

    public void init(BuildModelList buildings, ArrayList<Integer> addedBuildings) {
        this.buildings = buildings;
        this.addedBuildings = addedBuildings;

        updateViewBuildModelList(0);
    }

    public int getIndexSelected() {
        return indexSelected;
    }

    public int getReturnValue() {
        return returnValue;
    }

    private void updateViewBuildModelList(int indexSelected) {
        addElementsToListWithIndices(jlBuildModelList,
                buildings.getModelsName(),
                indexSelected);

    }

    private static void addElementsToListWithIndices(JList list, ArrayList<String> elements, int indexSelected) {
        DefaultListModel listModel = new DefaultListModel();
        for (int i = 0; i < elements.size(); i++) {
            listModel.addElement(String.valueOf(i) + ": " + elements.get(i));
        }
        list.setModel(listModel);

        indexSelected = Math.max(Math.min(list.getModel().getSize() - 1, indexSelected), 0);
        list.setSelectedIndex(indexSelected);
        list.ensureIndexIsVisible(indexSelected);
    }

    private static void addIconToJList(JList list, ImageIcon icon) {
        list.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                label.setIcon(icon);
                return label;
            }
        });
    }
}
