/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.nsbtx2;

import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author Trifindo
 */
public class NsbtxImportDialog extends javax.swing.JDialog {

    public static final int APPROVE_OPTION = 1, CANCEL_OPTION = 0;
    private int returnValue = CANCEL_OPTION;

    private Nsbtx2 nsbtx;
    private Nsbtx2 nxbtxToImport;

    /**
     * Creates new form NsbtxImportDialog
     */
    public NsbtxImportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlTexturesInNsbtx = new JList<>();
        jLabel1 = new javax.swing.JLabel();
        jbAddTexture = new javax.swing.JButton();
        jbRemoveTexture = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlTexturesToImport = new JList<>();
        jLabel2 = new javax.swing.JLabel();
        jbAddAllTextures = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlPalettesInNsbtx = new JList<>();
        jLabel3 = new javax.swing.JLabel();
        jbAddPalette = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jlPalettesToImport = new JList<>();
        jLabel4 = new javax.swing.JLabel();
        jbAddAllPalettes = new javax.swing.JButton();
        RemovePalette = new javax.swing.JButton();
        jbFinish = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select the Textures and Palettes to import from the NSBTX");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Texture List"));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(130, 130));

        jlTexturesInNsbtx.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jlTexturesInNsbtx);

        jLabel1.setText("Textures in NSBTX:");

        jbAddTexture.setText("Add >>");
        jbAddTexture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddTextureActionPerformed(evt);
            }
        });

        jbRemoveTexture.setText("Remove <<");
        jbRemoveTexture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveTextureActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(130, 130));

        jScrollPane2.setViewportView(jlTexturesToImport);

        jLabel2.setText("Textures to import:");

        jbAddAllTextures.setText("Add All >>");
        jbAddAllTextures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddAllTexturesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbRemoveTexture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbAddTexture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbAddAllTextures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbAddTexture)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAddAllTextures)
                        .addGap(18, 18, 18)
                        .addComponent(jbRemoveTexture)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette List"));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(130, 130));

        jlPalettesInNsbtx.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(jlPalettesInNsbtx);

        jLabel3.setText("Palettes in NSBTX:");

        jbAddPalette.setText("Add >>");
        jbAddPalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddPaletteActionPerformed(evt);
            }
        });

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane4.setPreferredSize(new java.awt.Dimension(130, 130));

        jScrollPane4.setViewportView(jlPalettesToImport);

        jLabel4.setText("Palettes to import:");

        jbAddAllPalettes.setText("Add All >>");
        jbAddAllPalettes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddAllPalettesActionPerformed(evt);
            }
        });

        RemovePalette.setText("Remove <<");
        RemovePalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemovePaletteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jbAddPalette, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(RemovePalette, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbAddAllPalettes, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jbAddPalette)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbAddAllPalettes)
                        .addGap(18, 18, 18)
                        .addComponent(RemovePalette)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jbFinish.setText("Finish");
        jbFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinishActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbCancel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancel)
                    .addComponent(jbFinish))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAddTextureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddTextureActionPerformed
        if(jlTexturesInNsbtx.getModel().getSize() > 0){
            int index = jlTexturesInNsbtx.getSelectedIndex();
            nxbtxToImport.addTexture(nsbtx.getTexture(index));
            nsbtx.getTextures().remove(index);
            updateViewTextures(index);
        }
    }//GEN-LAST:event_jbAddTextureActionPerformed

    private void jbAddPaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddPaletteActionPerformed
        if(jlPalettesInNsbtx.getModel().getSize() > 0){
            int index = jlPalettesInNsbtx.getSelectedIndex();
            nxbtxToImport.addPalette(nsbtx.getPalette(index));
            nsbtx.getPalettes().remove(index);
            updateViewPalettes(index);
        }
    }//GEN-LAST:event_jbAddPaletteActionPerformed

    private void jbAddAllTexturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddAllTexturesActionPerformed
        if(jlTexturesInNsbtx.getModel().getSize() > 0){
            nxbtxToImport.addTextures(nsbtx.getTextures());
            nsbtx.removeAllTextures();
            updateViewTextures(0);
        }
    }//GEN-LAST:event_jbAddAllTexturesActionPerformed

    private void jbAddAllPalettesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddAllPalettesActionPerformed
        if(jlPalettesInNsbtx.getModel().getSize() > 0){
            nxbtxToImport.addPalettes(nsbtx.getPalettes());
            nsbtx.removeAllPalettes();
            updateViewPalettes(0);
        }
    }//GEN-LAST:event_jbAddAllPalettesActionPerformed

    private void jbRemoveTextureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveTextureActionPerformed
        if(jlTexturesToImport.getModel().getSize() > 0){
            int index = jlTexturesToImport.getSelectedIndex();
            nsbtx.addTexture(nxbtxToImport.getTexture(index));
            nxbtxToImport.getTextures().remove(index);
            updateViewTextures(index);
        }
    }//GEN-LAST:event_jbRemoveTextureActionPerformed

    private void RemovePaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemovePaletteActionPerformed
        if(jlPalettesToImport.getModel().getSize() > 0){
            int index = jlPalettesToImport.getSelectedIndex();
            nsbtx.addPalette(nxbtxToImport.getPalette(index));
            nxbtxToImport.getPalettes().remove(index);
            updateViewPalettes(index);
        }
    }//GEN-LAST:event_RemovePaletteActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        returnValue = CANCEL_OPTION;
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jbFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinishActionPerformed
        returnValue = APPROVE_OPTION;
        dispose();
    }//GEN-LAST:event_jbFinishActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NsbtxImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NsbtxImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NsbtxImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NsbtxImportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NsbtxImportDialog dialog = new NsbtxImportDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RemovePalette;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jbAddAllPalettes;
    private javax.swing.JButton jbAddAllTextures;
    private javax.swing.JButton jbAddPalette;
    private javax.swing.JButton jbAddTexture;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFinish;
    private javax.swing.JButton jbRemoveTexture;
    private JList<String> jlPalettesInNsbtx;
    private JList<String> jlPalettesToImport;
    private JList<String> jlTexturesInNsbtx;
    private JList<String> jlTexturesToImport;
    // End of variables declaration//GEN-END:variables

    public void init(Nsbtx2 nsbtx) {
        this.nsbtx = nsbtx;

        nxbtxToImport = new Nsbtx2();

        updateViewTextures(0);
        updateViewPalettes(0);
        
    }
    
    private void updateViewTextures(int indexSelected){
        updateViewTextureNames(nsbtx, jlTexturesInNsbtx, indexSelected);
        updateViewTextureNames(nxbtxToImport, jlTexturesToImport, indexSelected);
    }
    
    private void updateViewPalettes(int indexSelected){
        updateViewPaletteNames(nxbtxToImport, jlPalettesToImport, indexSelected);
        updateViewPaletteNames(nsbtx, jlPalettesInNsbtx, indexSelected);
    }

    private void updateViewTextureNames(Nsbtx2 nsbtx, JList list, int indexSelected) {
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < nsbtx.getTextures().size(); i++) {
            String name = nsbtx.getTexture(i).getName();
            demoList.addElement(name);
        }
        list.setModel(demoList);
        if (indexSelected > demoList.size() - 1) {
            indexSelected = demoList.size() - 1;
        } else if (indexSelected < 0) {
            indexSelected = 0;
        }
        list.setSelectedIndex(indexSelected);
    }

    private void updateViewPaletteNames(Nsbtx2 nsbtx, JList list, int indexSelected) {
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < nsbtx.getPalettes().size(); i++) {
            String name = nsbtx.getPalette(i).getName();
            demoList.addElement(name);
        }
        list.setModel(demoList);
        if (indexSelected > demoList.size() - 1) {
            indexSelected = demoList.size() - 1;
        } else if (indexSelected < 0) {
            indexSelected = 0;
        }
        list.setSelectedIndex(indexSelected);
    }

    public Nsbtx2 getNsbtx(){
        return nxbtxToImport;
    }
    
    public int getReturnValue() {
        return returnValue;
    }

}
