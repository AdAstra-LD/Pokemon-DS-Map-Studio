/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.nsbtx2;

import editor.converter.ConverterErrorDialog;
import editor.handler.MapEditorHandler;
import editor.nsbtx2.exceptions.NsbtxTextureSizeException;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import utils.swing.ThumbnailFileChooser;
import utils.Utils;
import utils.Utils.MutableBoolean;

/**
 *
 * @author Trifindo
 */
public class NsbtxEditorDialog2 extends javax.swing.JDialog {

    private MapEditorHandler handler;
    private NsbtxHandler2 nsbtxHandler;

    private boolean textureListEnabled = true;
    private boolean paletteListEnabled = true;
    private MutableBoolean jtfTextureActive = new MutableBoolean(true);
    private MutableBoolean jtfPaletteActive = new MutableBoolean(true);

    private static final Color editingColor = new Color(255, 200, 200);
    private static final Color rightColor = new Color(200, 255, 200);

    /**
     * Creates new form NsbtxEditorDialog2
     */
    public NsbtxEditorDialog2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        Utils.addListenerToJTextFieldColor(jtfTextureName, jtfTextureActive, editingColor);
        Utils.addListenerToJTextFieldColor(jtfPaletteName, jtfPaletteActive, editingColor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlTextureNames = new javax.swing.JList<>();
        jbMoveTextureUp = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jbMoveTextureDown = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlPaletteNames = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jbMovePaletteUp = new javax.swing.JButton();
        jbMovePaletteDown = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        nsbtxDisplay = new NsbtxDisplay2();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcbColorTexture = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jtfTextureName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtfTextureWidth = new javax.swing.JTextField();
        jtfTextureHeight = new javax.swing.JTextField();
        jbExportTextureImg = new javax.swing.JButton();
        jcbTransparentColor = new javax.swing.JCheckBox();
        jbApplyTextureName = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        paletteDisplay = new PaletteDisplay2();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jtfPaletteName = new javax.swing.JTextField();
        jbApplyPaletteName = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jbReplaceTexture = new javax.swing.JButton();
        jbAddTextures = new javax.swing.JButton();
        jbRemoveTexture = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jbRemovePalette = new javax.swing.JButton();
        jbReplacePalette = new javax.swing.JButton();
        jbAddPalettes = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jbAddTextureAndPalette = new javax.swing.JButton();
        jbReplaceTextureAndPalette = new javax.swing.JButton();
        RemoveTextureAndPalette = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jbImportTexAndPalsNsbtx = new javax.swing.JButton();
        jbImportTexNsbtx = new javax.swing.JButton();
        jbImportPalNsbtx = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiNewNsbtx = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiOpenNsbtx = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiSaveNsbtx = new javax.swing.JMenuItem();
        jmiSaveNsbtxAs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("NSBTX Editor");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Texture Names"));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(130, 130));

        jlTextureNames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlTextureNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlTextureNamesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlTextureNames);

        jbMoveTextureUp.setText("▲");
        jbMoveTextureUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveTextureUpActionPerformed(evt);
            }
        });

        jLabel7.setText("Move:");

        jbMoveTextureDown.setText("▼");
        jbMoveTextureDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveTextureDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbMoveTextureUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbMoveTextureDown)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jbMoveTextureUp)
                    .addComponent(jbMoveTextureDown))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette Names"));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(130, 130));

        jlPaletteNames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlPaletteNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlPaletteNamesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jlPaletteNames);

        jLabel9.setText("Move:");

        jbMovePaletteUp.setText("▲");
        jbMovePaletteUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMovePaletteUpActionPerformed(evt);
            }
        });

        jbMovePaletteDown.setText("▼");
        jbMovePaletteDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMovePaletteDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbMovePaletteUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbMovePaletteDown)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jbMovePaletteUp)
                    .addComponent(jbMovePaletteDown))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Texture Display"));

        nsbtxDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(102, 102, 102)));

        javax.swing.GroupLayout nsbtxDisplayLayout = new javax.swing.GroupLayout(nsbtxDisplay);
        nsbtxDisplay.setLayout(nsbtxDisplayLayout);
        nsbtxDisplayLayout.setHorizontalGroup(
            nsbtxDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 158, Short.MAX_VALUE)
        );
        nsbtxDisplayLayout.setVerticalGroup(
            nsbtxDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 158, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nsbtxDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nsbtxDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Texture Properties"));

        jLabel1.setText("Color format:");

        jcbColorTexture.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Palette 4", "Palette 16", "Palette 256", "A3I5", "A5I3" }));
        jcbColorTexture.setEnabled(false);
        jcbColorTexture.setMinimumSize(new java.awt.Dimension(120, 20));
        jcbColorTexture.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel2.setText("Texture Name: ");

        jtfTextureName.setText(" ");

        jLabel3.setText("Texture Width: ");

        jLabel4.setText("Texture Height: ");

        jtfTextureWidth.setText(" ");
        jtfTextureWidth.setEnabled(false);

        jtfTextureHeight.setText(" ");
        jtfTextureHeight.setEnabled(false);

        jbExportTextureImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ExportIcon.png"))); // NOI18N
        jbExportTextureImg.setText("Export Texture Image...");
        jbExportTextureImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportTextureImgActionPerformed(evt);
            }
        });

        jcbTransparentColor.setText("Transparent color");
        jcbTransparentColor.setEnabled(false);

        jbApplyTextureName.setText("Apply");
        jbApplyTextureName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbApplyTextureNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jcbTransparentColor)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jbExportTextureImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbColorTexture, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jtfTextureName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbApplyTextureName))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfTextureHeight)
                            .addComponent(jtfTextureWidth))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbColorTexture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfTextureName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbApplyTextureName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfTextureWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtfTextureHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbTransparentColor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbExportTextureImg)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette Display"));

        javax.swing.GroupLayout paletteDisplayLayout = new javax.swing.GroupLayout(paletteDisplay);
        paletteDisplay.setLayout(paletteDisplayLayout);
        paletteDisplayLayout.setHorizontalGroup(
            paletteDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );
        paletteDisplayLayout.setVerticalGroup(
            paletteDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 160, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paletteDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paletteDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette Properties"));

        jLabel6.setText("Palette Name:");

        jtfPaletteName.setText(" ");

        jbApplyPaletteName.setText("Apply");
        jbApplyPaletteName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbApplyPaletteNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jtfPaletteName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbApplyPaletteName)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfPaletteName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbApplyPaletteName))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Texture Editor"));

        jbReplaceTexture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ReplaceIcon.png"))); // NOI18N
        jbReplaceTexture.setText("Replace Only Texture...");
        jbReplaceTexture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReplaceTextureActionPerformed(evt);
            }
        });

        jbAddTextures.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/AddIcon.png"))); // NOI18N
        jbAddTextures.setText("Add Only Textures...");
        jbAddTextures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddTexturesActionPerformed(evt);
            }
        });

        jbRemoveTexture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/RemoveIcon.png"))); // NOI18N
        jbRemoveTexture.setText("Remove Only Texture");
        jbRemoveTexture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveTextureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbReplaceTexture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbAddTextures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbRemoveTexture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbReplaceTexture)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAddTextures)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbRemoveTexture)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette Editor"));

        jbRemovePalette.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/RemoveIcon.png"))); // NOI18N
        jbRemovePalette.setText("Remove Only Palette");
        jbRemovePalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemovePaletteActionPerformed(evt);
            }
        });

        jbReplacePalette.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ReplaceIcon.png"))); // NOI18N
        jbReplacePalette.setText("Replace Only Palette...");
        jbReplacePalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReplacePaletteActionPerformed(evt);
            }
        });

        jbAddPalettes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/AddIcon.png"))); // NOI18N
        jbAddPalettes.setText("Add Only Palettes...");
        jbAddPalettes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddPalettesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbReplacePalette, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbRemovePalette, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbAddPalettes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbReplacePalette)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAddPalettes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbRemovePalette)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Texture and Palette Editor"));

        jbAddTextureAndPalette.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/AddIcon.png"))); // NOI18N
        jbAddTextureAndPalette.setText("Add Textures and Palettes...");
        jbAddTextureAndPalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddTextureAndPaletteActionPerformed(evt);
            }
        });

        jbReplaceTextureAndPalette.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ReplaceIcon.png"))); // NOI18N
        jbReplaceTextureAndPalette.setText("Replace Texture and Palette...");
        jbReplaceTextureAndPalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReplaceTextureAndPaletteActionPerformed(evt);
            }
        });

        RemoveTextureAndPalette.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/RemoveIcon.png"))); // NOI18N
        RemoveTextureAndPalette.setText("Remove Texture and Palette");
        RemoveTextureAndPalette.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveTextureAndPaletteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbReplaceTextureAndPalette, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbAddTextureAndPalette, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RemoveTextureAndPalette, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbReplaceTextureAndPalette)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbAddTextureAndPalette)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RemoveTextureAndPalette)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("NSBTX Tools"));

        jbImportTexAndPalsNsbtx.setText("Import Textures and Palettes from NSBTX...");
        jbImportTexAndPalsNsbtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportTexAndPalsNsbtxActionPerformed(evt);
            }
        });

        jbImportTexNsbtx.setText("Import Only Textures from NSBTX...");
        jbImportTexNsbtx.setEnabled(false);
        jbImportTexNsbtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportTexNsbtxActionPerformed(evt);
            }
        });

        jbImportPalNsbtx.setText("Import Only Palettes from NSBTX...");
        jbImportPalNsbtx.setEnabled(false);
        jbImportPalNsbtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportPalNsbtxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbImportTexAndPalsNsbtx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbImportTexNsbtx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbImportPalNsbtx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbImportTexAndPalsNsbtx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbImportTexNsbtx)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbImportPalNsbtx)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jmFile.setText("File");

        jmiNewNsbtx.setText("New NSBTX...");
        jmiNewNsbtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNewNsbtxActionPerformed(evt);
            }
        });
        jmFile.add(jmiNewNsbtx);
        jmFile.add(jSeparator1);

        jmiOpenNsbtx.setText("Open NSBTX...");
        jmiOpenNsbtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiOpenNsbtxActionPerformed(evt);
            }
        });
        jmFile.add(jmiOpenNsbtx);
        jmFile.add(jSeparator2);

        jmiSaveNsbtx.setText("Save NSBTX...");
        jmiSaveNsbtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveNsbtxActionPerformed(evt);
            }
        });
        jmFile.add(jmiSaveNsbtx);

        jmiSaveNsbtxAs.setText("Save NSBTX as...");
        jmiSaveNsbtxAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveNsbtxAsActionPerformed(evt);
            }
        });
        jmFile.add(jmiSaveNsbtxAs);

        jMenuBar1.add(jmFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(9, 9, 9)
                                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiOpenNsbtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiOpenNsbtxActionPerformed
        openNsbtxWithDialog();
    }//GEN-LAST:event_jmiOpenNsbtxActionPerformed

    private void jlTextureNamesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlTextureNamesValueChanged
        if (nsbtxHandler.getNsbtx() != null && textureListEnabled) {
            //nsbtxHandler.setTextureIndexSelected(jlPaletteNames.getSelectedIndex());
            updateViewPaletteNamesUsingTexNames();
            updateView();
        }
    }//GEN-LAST:event_jlTextureNamesValueChanged

    private void jlPaletteNamesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlPaletteNamesValueChanged
        if (nsbtxHandler.getNsbtx() != null && paletteListEnabled) {
            updateView();
        }
    }//GEN-LAST:event_jlPaletteNamesValueChanged

    private void jbExportTextureImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportTextureImgActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            saveTextureWithDialog();
        }
    }//GEN-LAST:event_jbExportTextureImgActionPerformed

    private void jbReplaceTextureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReplaceTextureActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            replaceTexture();
        }
    }//GEN-LAST:event_jbReplaceTextureActionPerformed

    private void jbAddTexturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddTexturesActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            addTextures();
        }
    }//GEN-LAST:event_jbAddTexturesActionPerformed

    private void jbRemoveTextureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveTextureActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            removeTexture();
        }
    }//GEN-LAST:event_jbRemoveTextureActionPerformed

    private void jbReplacePaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReplacePaletteActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            replacePalette();
        }
    }//GEN-LAST:event_jbReplacePaletteActionPerformed

    private void jbAddPalettesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddPalettesActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            addPalettes();
        }
    }//GEN-LAST:event_jbAddPalettesActionPerformed

    private void jbRemovePaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemovePaletteActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            removePalette();
        }
    }//GEN-LAST:event_jbRemovePaletteActionPerformed

    private void jbReplaceTextureAndPaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReplaceTextureAndPaletteActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            replaceTextureAndPalette();
        }
    }//GEN-LAST:event_jbReplaceTextureAndPaletteActionPerformed

    private void jbAddTextureAndPaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddTextureAndPaletteActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            addTextureAndPalette();
        }
    }//GEN-LAST:event_jbAddTextureAndPaletteActionPerformed

    private void RemoveTextureAndPaletteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveTextureAndPaletteActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            removeTextureAndPalette();
        }
    }//GEN-LAST:event_RemoveTextureAndPaletteActionPerformed

    private void jbApplyTextureNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbApplyTextureNameActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            changeTextureName();
        }
    }//GEN-LAST:event_jbApplyTextureNameActionPerformed

    private void jbApplyPaletteNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbApplyPaletteNameActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            changePaletteName();
        }
    }//GEN-LAST:event_jbApplyPaletteNameActionPerformed

    private void jmiNewNsbtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNewNsbtxActionPerformed
        nsbtxHandler.newNsbtx();

        updateViewTextureNameList(0);
        updateViewPaletteNameList(0);
        updateViewTextureName();
        updateViewPaletteName();
        updateView();
    }//GEN-LAST:event_jmiNewNsbtxActionPerformed

    private void jmiSaveNsbtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveNsbtxActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            if (nsbtxHandler.getNsbtx().getPath() != null) {
                saveNsbtx();
            } else {
                saveNsbtxWithDialog();
            }
        }
    }//GEN-LAST:event_jmiSaveNsbtxActionPerformed

    private void jbMoveTextureUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveTextureUpActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            if (nsbtxHandler.getNsbtx().moveTextureUp(getTextureIndexSelected())) {
                updateViewTextureNameList(getTextureIndexSelected() - 1);
            }
        }
    }//GEN-LAST:event_jbMoveTextureUpActionPerformed

    private void jbMoveTextureDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveTextureDownActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            if (nsbtxHandler.getNsbtx().moveTextureDown(getTextureIndexSelected())) {
                updateViewTextureNameList(getTextureIndexSelected() + 1);
            }
        }
    }//GEN-LAST:event_jbMoveTextureDownActionPerformed

    private void jbMovePaletteUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMovePaletteUpActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            if (nsbtxHandler.getNsbtx().movePaletteUp(getPaletteIndexSelected())) {
                updateViewPaletteNameList(getPaletteIndexSelected() - 1);
            }
        }
    }//GEN-LAST:event_jbMovePaletteUpActionPerformed

    private void jbMovePaletteDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMovePaletteDownActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            if (nsbtxHandler.getNsbtx().movePaletteDown(getPaletteIndexSelected())) {
                updateViewPaletteNameList(getPaletteIndexSelected() + 1);
            }
        }
    }//GEN-LAST:event_jbMovePaletteDownActionPerformed

    private void jmiSaveNsbtxAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveNsbtxAsActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            saveNsbtxWithDialog();
        }
    }//GEN-LAST:event_jmiSaveNsbtxAsActionPerformed

    private void jbImportTexAndPalsNsbtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportTexAndPalsNsbtxActionPerformed
        if (nsbtxHandler != null) {
            importTexturesAndPalettesWithDialog();
        }
    }//GEN-LAST:event_jbImportTexAndPalsNsbtxActionPerformed

    private void jbImportTexNsbtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportTexNsbtxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbImportTexNsbtxActionPerformed

    private void jbImportPalNsbtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportPalNsbtxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbImportPalNsbtxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RemoveTextureAndPalette;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JButton jbAddPalettes;
    private javax.swing.JButton jbAddTextureAndPalette;
    private javax.swing.JButton jbAddTextures;
    private javax.swing.JButton jbApplyPaletteName;
    private javax.swing.JButton jbApplyTextureName;
    private javax.swing.JButton jbExportTextureImg;
    private javax.swing.JButton jbImportPalNsbtx;
    private javax.swing.JButton jbImportTexAndPalsNsbtx;
    private javax.swing.JButton jbImportTexNsbtx;
    private javax.swing.JButton jbMovePaletteDown;
    private javax.swing.JButton jbMovePaletteUp;
    private javax.swing.JButton jbMoveTextureDown;
    private javax.swing.JButton jbMoveTextureUp;
    private javax.swing.JButton jbRemovePalette;
    private javax.swing.JButton jbRemoveTexture;
    private javax.swing.JButton jbReplacePalette;
    private javax.swing.JButton jbReplaceTexture;
    private javax.swing.JButton jbReplaceTextureAndPalette;
    private javax.swing.JComboBox<String> jcbColorTexture;
    private javax.swing.JCheckBox jcbTransparentColor;
    private javax.swing.JList<String> jlPaletteNames;
    private javax.swing.JList<String> jlTextureNames;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenuItem jmiNewNsbtx;
    private javax.swing.JMenuItem jmiOpenNsbtx;
    private javax.swing.JMenuItem jmiSaveNsbtx;
    private javax.swing.JMenuItem jmiSaveNsbtxAs;
    private javax.swing.JTextField jtfPaletteName;
    private javax.swing.JTextField jtfTextureHeight;
    private javax.swing.JTextField jtfTextureName;
    private javax.swing.JTextField jtfTextureWidth;
    private NsbtxDisplay2 nsbtxDisplay;
    private PaletteDisplay2 paletteDisplay;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler) {
        this.handler = handler;
        this.nsbtxHandler = new NsbtxHandler2(handler, this);

        this.nsbtxDisplay.init(nsbtxHandler);
        this.paletteDisplay.init(nsbtxHandler);

    }

    private void updateView() {
        nsbtxDisplay.updateImage();
        nsbtxDisplay.repaint();

        paletteDisplay.updatePalette();
        paletteDisplay.repaint();

        updateViewTextureProperties();

        updateViewTextureName();
        updateViewPaletteName();
    }

    private void updateViewTextureProperties() {
        if (nsbtxHandler.getSelectedTexture() != null) {
            int index = Nsbtx2.formatToJcbLookup[nsbtxHandler.getSelectedTexture().getColorFormat()];
            jcbColorTexture.setSelectedIndex(index);
            jtfTextureWidth.setText(String.valueOf(nsbtxHandler.getSelectedTexture().getWidth()));
            jtfTextureHeight.setText(String.valueOf(nsbtxHandler.getSelectedTexture().getHeight()));
            jcbTransparentColor.setSelected(nsbtxHandler.getSelectedTexture().isTransparent());
        }
    }

    private void updateViewTextureName() {
        if (nsbtxHandler.getSelectedTexture() != null) {
            String name = nsbtxHandler.getSelectedTexture().getName();
            jtfTextureActive.value = false;
            jtfTextureName.setText(name);
            jtfTextureName.setBackground(Color.white);
            jtfTextureActive.value = true;
        } else {
            jtfTextureActive.value = false;
            jtfTextureName.setText("");
            jtfTextureName.setBackground(Color.white);
            jtfTextureActive.value = true;
        }
    }

    private void updateViewPaletteName() {
        if (nsbtxHandler.getSelectedPalette() != null) {
            String name = nsbtxHandler.getSelectedPalette().getName();
            jtfPaletteActive.value = false;
            jtfPaletteName.setText(name);
            jtfPaletteName.setBackground(Color.white);
            jtfPaletteActive.value = true;
        } else {
            jtfPaletteActive.value = false;
            jtfPaletteName.setText("");
            jtfPaletteName.setBackground(Color.white);
            jtfPaletteActive.value = true;
        }
    }

    private void updateViewTextureNameList(int indexSelected) {
        textureListEnabled = false;
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < nsbtxHandler.getNsbtx().getTextures().size(); i++) {
            String name = nsbtxHandler.getNsbtx().getTexture(i).getName();
            demoList.addElement(name);
        }
        jlTextureNames.setModel(demoList);
        if (indexSelected > demoList.size() - 1) {
            indexSelected = demoList.size() - 1;
        } else if (indexSelected < 0) {
            indexSelected = 0;
        }
        jlTextureNames.setSelectedIndex(indexSelected);//nsbtxHandler.getTextureIndexSelected());
        textureListEnabled = true;
    }

    private void updateViewPaletteNameList(int indexSelected) {
        paletteListEnabled = false;
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < nsbtxHandler.getNsbtx().getPalettes().size(); i++) {
            String name = nsbtxHandler.getNsbtx().getPalette(i).getName();
            demoList.addElement(name);
        }
        jlPaletteNames.setModel(demoList);
        if (indexSelected > demoList.size() - 1) {
            indexSelected = demoList.size() - 1;
        } else if (indexSelected < 0) {
            indexSelected = 0;
        }
        jlPaletteNames.setSelectedIndex(indexSelected);//nsbtxHandler.getPaletteIndexSelected());
        paletteListEnabled = true;
    }

    private void updateViewPaletteNamesUsingTexNames() {
        int index = jlTextureNames.getSelectedIndex();
        int paletteIndex;
        String paletteName = nsbtxHandler.getNsbtx().getTexture(index).getName();
        if ((paletteIndex = nsbtxHandler.indexOfPaletteName(paletteName)) != -1
                || (paletteIndex = nsbtxHandler.indexOfPaletteName(setElementInString(paletteName, "_pl"))) != -1) {
            jlPaletteNames.setSelectedIndex(paletteIndex);
            jlPaletteNames.ensureIndexIsVisible(jlPaletteNames.getSelectedIndex());
        }
    }

    private void openNsbtxWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastNsbtxDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("NSBTX (*.nsbtx)", "nsbtx"));
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Open NSBTX File");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                nsbtxHandler.loadNsbtx(fc.getSelectedFile().getPath());

                updateViewTextureNameList(0);
                updateViewPaletteNameList(0);

                textureListEnabled = false;
                jlTextureNames.setSelectedIndex(0);
                textureListEnabled = true;
                paletteListEnabled = false;
                jlPaletteNames.setSelectedIndex(0);
                paletteListEnabled = true;

                updateView();

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't open file.",
                        "Error opening NSBTX", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void saveTextureWithDialog() {
        if (nsbtxHandler.getNsbtx().hasTextures() && nsbtxHandler.getNsbtx().hasPalettes()) {
            final ThumbnailFileChooser fc = new ThumbnailFileChooser();
            if (handler.getLastNsbtxDirectoryUsed() != null) {
                fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
            }
            fc.setFileFilter(new FileNameExtensionFilter("PNG (*.png)", "png"));
            fc.setApproveButtonText("Save");
            fc.setDialogTitle("Save Texture as PNG");
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
                try {
                    String path = fc.getSelectedFile().getPath();
                    path = Utils.addExtensionToPath(path, "png");
                    ImageIO.write(nsbtxHandler.getSelectedImage(), "png", new File(path));
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Can't save file.",
                            "Error saving image", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "The NSBTX needs at least 1 texture and 1 palette for exporting the texture",
                    "Can't export texture image", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void replaceTexture() {
        if (nsbtxHandler.getNsbtx().hasTextures() && nsbtxHandler.getNsbtx().hasPalettes()) {
            final NsbtxColorFormatReplaceSelector dialog = new NsbtxColorFormatReplaceSelector(handler.getMainFrame(), true);
            dialog.init(
                    nsbtxHandler.getSelectedTexture().getColorFormat(),
                    nsbtxHandler.getSelectedTexture().isTransparent());
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            if (dialog.getReturnValue() == NsbtxColorFormatReplaceSelector.APPROVE_OPTION) {
                int colorFormat = dialog.getFormat();
                boolean isTransparent = dialog.getIsTransparent();

                final ThumbnailFileChooser fc = new ThumbnailFileChooser();
                if (handler.getLastNsbtxDirectoryUsed() != null) {
                    fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
                }
                fc.setFileFilter(new FileNameExtensionFilter("png (*.png)", "png"));
                fc.setApproveButtonText("Open");
                fc.setDialogTitle("Open PNG Image");
                int returnVal = fc.showOpenDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
                    try {
                        BufferedImage img = ImageIO.read(fc.getSelectedFile());

                        nsbtxHandler.getNsbtx().replaceTexture(
                                jlTextureNames.getSelectedIndex(),
                                jlPaletteNames.getSelectedIndex(),
                                img, colorFormat, isTransparent
                        );

                        updateView();

                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Can't open file.",
                                "Error opening image", JOptionPane.ERROR_MESSAGE);
                    }
                }

            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "The NSBTX needs at least 1 texture and 1 palette for replacing the texture",
                    "Can't replace texture", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void addTextures() {
        if (nsbtxHandler.getNsbtx().hasPalettes()) {
            final NsbtxColorFormatAddSelector dialog = new NsbtxColorFormatAddSelector(handler.getMainFrame(), true);
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            if (dialog.getReturnValue() == NsbtxColorFormatAddSelector.APPROVE_OPTION) {
                int colorFormat = dialog.getFormat();
                boolean isTransparent = dialog.getIsTransparent();

                final ThumbnailFileChooser fc = new ThumbnailFileChooser();
                if (handler.getLastNsbtxDirectoryUsed() != null) {
                    fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
                }
                fc.setFileFilter(new FileNameExtensionFilter("png (*.png)", "png"));
                fc.setApproveButtonText("Open");
                fc.setDialogTitle("Open PNG Image");
                fc.setMultiSelectionEnabled(true);
                int returnVal = fc.showOpenDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());

                    File[] files = fc.getSelectedFiles();

                    boolean errorLoadingFiles = false;
                    for (File file : files) {
                        try {
                            BufferedImage img = ImageIO.read(file);
                            String name = Utils.removeExtensionFromPath(file.getName());

                            nsbtxHandler.getNsbtx().addTexture(
                                    jlTextureNames.getSelectedIndex(),
                                    jlPaletteNames.getSelectedIndex(),
                                    img, colorFormat, isTransparent, name
                            );
                        } catch (IOException ex) {
                            errorLoadingFiles = true;
                        }
                    }

                    if (errorLoadingFiles) {
                        JOptionPane.showMessageDialog(this, "Some images could not be opened",
                                "Error opening images", JOptionPane.ERROR_MESSAGE);
                    }

                    updateViewTextureNameList(getTextureIndexSelected() + 1);
                    updateView();
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "The NSBTX needs at least 1 palette for adding only the texture",
                    "Can't add texture", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void removeTexture() {
        if (nsbtxHandler.getNsbtx().hasTextures()) {
            int index = getTextureIndexSelected();
            if (index != -1) {
                nsbtxHandler.getNsbtx().getTextures().remove(index);
            }
        }
        updateViewTextureNameList(getTextureIndexSelected());
        updateView();
    }

    private void replacePalette() {
        if (nsbtxHandler.getNsbtx().hasTextures() && nsbtxHandler.getNsbtx().hasPalettes()) {
            final ThumbnailFileChooser fc = new ThumbnailFileChooser();
            if (handler.getLastNsbtxDirectoryUsed() != null) {
                fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
            }
            fc.setFileFilter(new FileNameExtensionFilter("png (*.png)", "png"));
            fc.setApproveButtonText("Open");
            fc.setDialogTitle("Open PNG Image");
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
                try {
                    BufferedImage img = ImageIO.read(fc.getSelectedFile());
                    try {
                        nsbtxHandler.getNsbtx().replacePalette(
                                getTextureIndexSelected(),
                                getPaletteIndexSelected(), img);

                        updateView();
                    } catch (NsbtxTextureSizeException ex) {
                        JOptionPane.showMessageDialog(this,
                                "The source image and the new image must have the same size",
                                "Can't replace palette", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Can't open file.",
                            "Error opening image", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "The NSBTX needs at least 1 texture and 1 palette for replacing only the palette",
                    "Can't replace palette", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void addPalettes() {
        if (nsbtxHandler.getNsbtx().hasTextures() && nsbtxHandler.getNsbtx().hasPalettes()) {
            final ThumbnailFileChooser fc = new ThumbnailFileChooser();
            if (handler.getLastNsbtxDirectoryUsed() != null) {
                fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
            }
            fc.setFileFilter(new FileNameExtensionFilter("png (*.png)", "png"));
            fc.setApproveButtonText("Open");
            fc.setDialogTitle("Open PNG Image");
            fc.setMultiSelectionEnabled(true);
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());

                File[] files = fc.getSelectedFiles();

                boolean errorLoadingFiles = false;
                boolean errorTexturesSize = false;
                String wrongSizeTextureNames = "";
                int numWrongSizeTextures = 0;
                final int maxWrongSizeTextures = 6;
                for (File file : files) {
                    try {
                        BufferedImage img = ImageIO.read(file);
                        String name = Utils.removeExtensionFromPath(file.getName());
                        try {
                            nsbtxHandler.getNsbtx().addPalette(
                                    getTextureIndexSelected(),
                                    getPaletteIndexSelected(),
                                    name + "_pl", img);
                        } catch (NsbtxTextureSizeException ex) {
                            errorTexturesSize = true;
                            if (numWrongSizeTextures < maxWrongSizeTextures) {
                                wrongSizeTextureNames += "- " + name + "\n";
                            } else if (numWrongSizeTextures == maxWrongSizeTextures) {
                                wrongSizeTextureNames += "...(more)" + "\n";
                            }
                            numWrongSizeTextures++;
                        }
                    } catch (IOException ex) {
                        errorLoadingFiles = true;
                    }
                }

                if (errorTexturesSize) {
                    JOptionPane.showMessageDialog(this,
                            String.valueOf(numWrongSizeTextures)
                            + " images do not have the same size as the source texture: \n"
                            + wrongSizeTextureNames,
                            "Can't add some palettes", JOptionPane.ERROR_MESSAGE);
                } else if (errorLoadingFiles) {
                    JOptionPane.showMessageDialog(this, "There was a problem opening some images",
                            "Error opening some images", JOptionPane.ERROR_MESSAGE);
                }

                updateViewPaletteNameList(getPaletteIndexSelected() + 1);
                updateView();
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "The NSBTX needs at least 1 texture and 1 palette for adding only the palette",
                    "Can't add palette", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void removePalette() {
        if (nsbtxHandler.getNsbtx().hasPalettes()) {
            int index = getPaletteIndexSelected();
            if (index != -1) {
                nsbtxHandler.getNsbtx().getPalettes().remove(index);
            }
        }
        updateViewPaletteNameList(getPaletteIndexSelected());
        updateView();
    }

    private void replaceTextureAndPalette() {
        if (nsbtxHandler.getNsbtx().hasTextures() && nsbtxHandler.getNsbtx().hasPalettes()) {
            final NsbtxColorFormatReplaceSelector dialog = new NsbtxColorFormatReplaceSelector(handler.getMainFrame(), true);
            dialog.init(
                    nsbtxHandler.getSelectedTexture().getColorFormat(),
                    nsbtxHandler.getSelectedTexture().isTransparent());
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            if (dialog.getReturnValue() == NsbtxColorFormatReplaceSelector.APPROVE_OPTION) {
                int colorFormat = dialog.getFormat();
                boolean isTransparent = dialog.getIsTransparent();

                final ThumbnailFileChooser fc = new ThumbnailFileChooser();
                if (handler.getLastNsbtxDirectoryUsed() != null) {
                    fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
                }
                fc.setFileFilter(new FileNameExtensionFilter("png (*.png)", "png"));
                fc.setApproveButtonText("Open");
                fc.setDialogTitle("Open PNG Image");
                int returnVal = fc.showOpenDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
                    try {
                        BufferedImage img = ImageIO.read(fc.getSelectedFile());

                        nsbtxHandler.getNsbtx().replaceTextureAndPalette(
                                getTextureIndexSelected(),
                                getPaletteIndexSelected(), img,
                                colorFormat, isTransparent);

                        updateView();

                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Can't open file.",
                                "Error opening image", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "The NSBTX needs at least 1 texture and 1 palette for replacing the texture",
                    "Can't replace texture", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void addTextureAndPalette() {
        final NsbtxColorFormatAddSelector dialog = new NsbtxColorFormatAddSelector(handler.getMainFrame(), true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (dialog.getReturnValue() == NsbtxColorFormatReplaceSelector.APPROVE_OPTION) {
            int colorFormat = dialog.getFormat();
            boolean isTransparent = dialog.getIsTransparent();

            final ThumbnailFileChooser fc = new ThumbnailFileChooser();
            if (handler.getLastNsbtxDirectoryUsed() != null) {
                fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
            }
            fc.setFileFilter(new FileNameExtensionFilter("png (*.png)", "png"));
            fc.setApproveButtonText("Open");
            fc.setDialogTitle("Open PNG Image");
            fc.setMultiSelectionEnabled(true);
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());

                boolean errorLoadingFiles = false;
                File[] files = fc.getSelectedFiles();
                for (File file : files) {
                    try {
                        BufferedImage img = ImageIO.read(file);

                        String name = Utils.removeExtensionFromPath(file.getName());

                        nsbtxHandler.getNsbtx().addTextureAndPalette(
                                getTextureIndexSelected(),
                                getPaletteIndexSelected(), img,
                                colorFormat, isTransparent, name, name + "_pl");

                    } catch (IOException ex) {
                        errorLoadingFiles = true;
                    }
                }

                if (errorLoadingFiles) {
                    JOptionPane.showMessageDialog(this, "There was a problem opening some images",
                            "Error opening some images", JOptionPane.ERROR_MESSAGE);
                }

                updateViewTextureNameList(getTextureIndexSelected() + 1);
                updateViewPaletteNameList(getPaletteIndexSelected() + 1);
                updateView();
            }
        }
    }

    private void removeTextureAndPalette() {
        if (nsbtxHandler.getNsbtx().hasTextures()) {
            int index = getTextureIndexSelected();
            if (index != -1) {
                nsbtxHandler.getNsbtx().getTextures().remove(index);
            }
        }

        if (nsbtxHandler.getNsbtx().hasPalettes()) {
            int index = getPaletteIndexSelected();
            if (index != -1) {
                nsbtxHandler.getNsbtx().getPalettes().remove(index);
            }
        }
        updateViewTextureNameList(getTextureIndexSelected());
        updateViewPaletteNameList(getPaletteIndexSelected());
        updateView();
    }

    private void importTexturesAndPalettesWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastNsbtxDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("NSBTX (*.nsbtx)", "nsbtx"));
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Choose the NSBTX to import data from");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
            try {

                Nsbtx2 nsbtx = NsbtxLoader2.loadNsbtx(fc.getSelectedFile().getPath());

                final NsbtxImportDialog dialog = new NsbtxImportDialog(handler.getMainFrame(), true);
                dialog.init(nsbtx);
                dialog.setLocationRelativeTo(this);
                dialog.setVisible(true);

                if (dialog.getReturnValue() == NsbtxImportDialog.APPROVE_OPTION) {

                    nsbtxHandler.getNsbtx().addNsbtx(dialog.getNsbtx());

                    updateViewTextureNameList(nsbtxHandler.getNsbtx().getTextures().size() - 1);
                    updateViewPaletteNameList(nsbtxHandler.getNsbtx().getPalettes().size() - 1);

                    updateView();
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't open file.",
                        "Error opening NSBTX", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void changeTextureName() {
        if (nsbtxHandler.getSelectedTexture() != null) {
            String name = jtfTextureName.getText();
            if (name.length() <= Nsbtx2.maxNameSize) {
                jtfTextureActive.value = false;
                nsbtxHandler.getSelectedTexture().setName(name);
                jtfTextureName.setBackground(rightColor);
                jtfTextureActive.value = true;

                updateViewTextureNameList(getTextureIndexSelected());
            } else {
                JOptionPane.showMessageDialog(this,
                        "The texture name has more than 16 characters",
                        "The name is too long",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void changePaletteName() {
        if (nsbtxHandler.getSelectedPalette() != null) {
            String name = jtfPaletteName.getText();
            if (name.length() <= Nsbtx2.maxNameSize) {
                jtfPaletteActive.value = false;
                nsbtxHandler.getSelectedPalette().setName(name);
                jtfPaletteName.setBackground(rightColor);
                jtfPaletteActive.value = true;

                updateViewPaletteNameList(getPaletteIndexSelected());
            } else {
                JOptionPane.showMessageDialog(this,
                        "The palette name has more than 16 characters",
                        "The name is too long",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private boolean hasRepeatedTextures() {
        String repeatedTex = nsbtxHandler.getNsbtx().getRepeatedTextureName();
        String repeatedPal = nsbtxHandler.getNsbtx().getRepeatedPaletteName();
        if (repeatedTex != null) {
            JOptionPane.showMessageDialog(this, "The texture named \"" + repeatedTex + "\" is repeated",
                    "Repeated texture name", JOptionPane.ERROR_MESSAGE);
            return true;
        } else if (repeatedPal != null) {
            JOptionPane.showMessageDialog(this, "The palette named \"" + repeatedPal + "\" is repeated",
                    "Repeated palette name", JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }

    private void saveNsbtx() {
        if (!hasRepeatedTextures()) {
            String path = nsbtxHandler.getNsbtx().getPath();
            path = Utils.removeExtensionFromPath(path);
            path = Utils.addExtensionToPath(path, "imd");

            NsbtxImd imd = new NsbtxImd(nsbtxHandler.getNsbtx());

            try {
                imd.saveToFile(path);

                saveImdToNsbmd(path);
            } catch (IOException | ParserConfigurationException | TransformerException ex) {
                JOptionPane.showMessageDialog(this, "There was an error saving the IMD",
                        "Error saving IMD", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void saveNsbtxWithDialog() {
        if (nsbtxHandler.getNsbtx().hasTextures() && nsbtxHandler.getNsbtx().hasPalettes()) {
            if (!hasRepeatedTextures()) {
                final JFileChooser fc = new JFileChooser();
                if (handler.getLastNsbtxDirectoryUsed() != null) {
                    fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
                }
                fc.setFileFilter(new FileNameExtensionFilter("NSBTX (*.nsbtx)", "nsbtx"));
                fc.setApproveButtonText("Save");
                fc.setDialogTitle("Save NSBTX");
                int returnVal = fc.showOpenDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
                    try {
                        String path = fc.getSelectedFile().getPath();
                        path = Utils.removeExtensionFromPath(path);
                        path = Utils.addExtensionToPath(path, "imd");

                        NsbtxImd imd = new NsbtxImd(nsbtxHandler.getNsbtx());

                        imd.saveToFile(path);

                        saveImdToNsbmd(path);

                    } catch (IOException | ParserConfigurationException | TransformerException ex) {
                        JOptionPane.showMessageDialog(this, "There was an error saving the IMD",
                                "Error saving IMD", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "The NSBTX needs at least 1 texture and 1 palette for exporting the texture",
                    "Can't export texture image", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void saveImdToNsbmd(String imdPath) {
        File file = new File(imdPath);
        if (file.exists()) {
            String filename = new File(imdPath).getName();
            filename = Utils.removeExtensionFromPath(filename);
            try {
                String converterPath = "converter/g3dcvtr.exe";
                String[] cmd;
                if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
                    cmd = new String[]{converterPath, imdPath, "-etex", "-o", filename};
                } else {
                    cmd = new String[]{"wine", converterPath, imdPath, "-etex", "-o", filename};
                    // NOTE: wine call works only with relative path
                }

                if (!Files.exists(Paths.get(converterPath))) {
                    throw new IOException();
                }

                Process p = new ProcessBuilder(cmd).start();

                BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

                String outputString = "";
                String line = null;
                while ((line = stdError.readLine()) != null) {
                    outputString += line + "\n";
                }

                p.waitFor();
                p.destroy();

                String nsbPath = Utils.removeExtensionFromPath(imdPath);
                nsbPath = Utils.addExtensionToPath(nsbPath, "nsbtx");

                filename = Utils.removeExtensionFromPath(filename);
                filename = Utils.addExtensionToPath(filename, "nsbtx");

                System.out.println(System.getProperty("user.dir"));
                File srcFile = new File(System.getProperty("user.dir") + File.separator + filename);
                File dstFile = new File(nsbPath);
                if (srcFile.exists()) {
                    try {
                        Files.move(srcFile.toPath(), dstFile.toPath(),
                                StandardCopyOption.REPLACE_EXISTING);
                        //srcFile.renameTo(new File(nsbPath));
                        JOptionPane.showMessageDialog(this, "NSBTX succesfully saved.",
                                "NSBTX saved", JOptionPane.INFORMATION_MESSAGE);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this,
                                "File was not moved to the save directory. \n"
                                + "Reopen Pokemon DS Map Studio and try again.",
                                "Problem saving generated file",
                                JOptionPane.ERROR_MESSAGE);
                    }

                    if (file.exists()) {

                        try {
                            Files.delete(file.toPath());
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(this,
                                    "The intermediate IMD file can't be deleted",
                                    "The intermediate IMD delete error",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else {
                    ConverterErrorDialog dialog = new ConverterErrorDialog(handler.getMainFrame(), true);
                    dialog.init("There was a problem saving the NSBTX file. \n"
                            + "The output from the converter is:",
                            outputString);
                    dialog.setTitle("Problem generating file");
                    dialog.setLocationRelativeTo(this);
                    dialog.setVisible(true);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                        "The program \"g3dcvtr.exe\" is not found in the \"converter\" folder.\n"
                        + "Put the program and its *.dll files in the folder and try again.",
                        "Converter not found",
                        JOptionPane.ERROR_MESSAGE);
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(this,
                        "The IMD was not converted",
                        "Problem converting the IMD",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "There was a problem saving the NSBTX",
                    "Problem creating the NSBTX",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    public int getTextureIndexSelected() {
        return jlTextureNames.getSelectedIndex();
    }

    public int getPaletteIndexSelected() {
        return jlPaletteNames.getSelectedIndex();
    }

    private String setElementInString(String src, String newPart) {
        return src + newPart;
        //return src.replaceFirst(" ", newPart).substring(0, Math.min(16, src.length()));
    }

}
