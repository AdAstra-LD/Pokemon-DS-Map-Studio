/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.bdhc;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;

/**
 *
 * @author Trifindo
 */
public class AngleDisplay extends javax.swing.JPanel {

    private static final int size = 64;
    private static final int radius = 24;

    private int indexSlope1 = 0;
    private int indexSlope2 = 1;
    private boolean frontView = true;

    private BdhcHandler bdhcHandler;

    /**
     * Creates new form AngleDisplay
     */
    public AngleDisplay() {
        initComponents();

        setPreferredSize(new Dimension(size, size));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (bdhcHandler != null) {
            int[] slopes = bdhcHandler.getSelectedPlate().getSlope();
            float angle = (float) Math.atan2(slopes[indexSlope1], slopes[indexSlope2]);

            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);

            g.setColor(Color.magenta);
            final int angleRadius = (radius * 2) / 3;
            final int angleOffset = size / 2 - angleRadius;
            g2.setStroke(new BasicStroke(2));
            g.drawArc(angleOffset, angleOffset, 2 * angleRadius, 2 * angleRadius, 0, (int) (-(angle * 180) / Math.PI));

            g2.setStroke(new BasicStroke(2));
            if (frontView) {
                g.setColor(Color.red);
                g.drawLine(size / 2, size / 2, size, size / 2);
                g.setColor(Color.blue);
                g.drawLine(size / 2, size / 2, size / 2, 0);
            } else {
                g.setColor(Color.green);
                //g.drawLine(size / 2, size / 2, size, size / 2);
                g.drawLine(size / 2, size / 2, size, size / 2);
                g.setColor(Color.blue);
                g.drawLine(size / 2, size / 2, size / 2, 0);
            }

            int circleOffset = size / 2 - radius;
            g.setColor(Color.black);
            g2.setStroke(new BasicStroke(1));
            g.drawOval(circleOffset, circleOffset, radius * 2, radius * 2);

            int x = (int) (Math.cos(angle) * radius);
            int y = (int) (Math.sin(angle) * radius);
            int lineOffset = size / 2;
            g.setColor(Color.orange);
            g2.setStroke(new BasicStroke(3));
            g.drawLine(lineOffset - x, lineOffset - y, lineOffset + x, lineOffset + y);

        }

    }

    public void init(BdhcHandler bdhcHandler, int index1, int index2, boolean frontView) {
        this.bdhcHandler = bdhcHandler;
        this.indexSlope1 = index1;
        this.indexSlope2 = index2;
        this.frontView = frontView;

    }

}
