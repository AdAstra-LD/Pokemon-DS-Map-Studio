/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.imd;

import editor.handler.MapEditorHandler;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import tileset.NormalsNotFoundException;
import tileset.TextureNotFoundException;
import utils.Utils;

/**
 *
 * @author Trifindo
 */
public class ImdOutputInfoDialog extends javax.swing.JDialog {

    private MapEditorHandler handler;

    private ArrayList<String> fileNames;
    private String objFolderPath;
    private String imdFolderPath;

    private Thread convertingThread;

    private static final Color GREEN = new Color(6, 176, 37);
    private static final Color ORANGE = new Color(255, 106, 0);
    private static final Color RED = Color.red;

    private enum ConvertStatus {
        SUCCESS_STATUS("SUCCESSFULLY CONVERTED", GREEN),
        TOO_MANY_POLYGONS_STATUS("SUCCESSFULLY CONVERTED (TOO MANY POLYGONS)", ORANGE),
        TOO_MANY_TRIANGLES_STATUS("SUCCESSFULLY CONVERTED (TOO MANY TRIANGLES)", ORANGE),
        XML_ERROR_STATUS("NOT CONVERTED (XML ERROR)", RED),
        IO_ERROR_STATUS("NOT CONVERTED (IO ERROR)", RED),
        TEXURE_ERROR_STATUS("NOT CONVERTED (TEXTURES NOT FOUND)", RED),
        NORMALS_ERROR_STATUS("NOT CONVERTED (NORMALS NOT FOUND)", RED),
        UNKNOWN_ERROR_STATUS("NOT CONVERTED (UNKNOWN ERROR)", RED);

        public final String msg;
        public final Color color;

        private ConvertStatus(String msg, Color color) {
            this.msg = msg;
            this.color = color;
        }
    };

    /**
     * Creates new form ImdOutputInfoDialog
     */
    public ImdOutputInfoDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        getRootPane().setDefaultButton(jbAccept);
        jbAccept.requestFocus();
        
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(250);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(80);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(80);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(80);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(80);

        jTable1.getColumnModel().getColumn(1).setCellRenderer(new StatusColumnCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbAccept = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jlFilesProcessed = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jlFilesConverted = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jlFilesWithWarnings = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jlFilesNotConverted = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jlStatus = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jlResult = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Resulting IMD files info");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jbAccept.setText("OK");
        jbAccept.setEnabled(false);
        jbAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAcceptActionPerformed(evt);
            }
        });
        jPanel1.add(jbAccept);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Export IMD info"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Status", "# Materials", "# Vertices", "# Polygons", "# Triangles", "# Quads"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("IMD exporting progress:");

        jLabel2.setText("Files processed:");

        jlFilesProcessed.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlFilesProcessed.setText("N/N");

        jLabel4.setText("Files converted into IMD:");

        jlFilesConverted.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlFilesConverted.setText("N");

        jLabel6.setText("Files converted but with warnings :");

        jlFilesWithWarnings.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlFilesWithWarnings.setText("N");

        jLabel8.setText("Files not converted:");

        jlFilesNotConverted.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlFilesNotConverted.setText("N");

        jLabel3.setText("Status:");

        jlStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jlStatus.setText("Converting...");

        jLabel5.setText("Result:");

        jlResult.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlResult.setText(" ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlFilesProcessed, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlFilesConverted, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlFilesWithWarnings, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlFilesNotConverted, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jlResult, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jlStatus))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jlFilesProcessed))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlFilesConverted))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlFilesWithWarnings))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlFilesNotConverted))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jlResult))
                .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        if (convertingThread == null) {
            convertingThread = new Thread(new Runnable() {
                @Override
                public void run() {
                    saveAllImds();
                }
            });
            convertingThread.start();
        }
    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        convertingThread.interrupt();
    }//GEN-LAST:event_formWindowClosed

    private void jbAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAcceptActionPerformed
        dispose();
    }//GEN-LAST:event_jbAcceptActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbAccept;
    private javax.swing.JLabel jlFilesConverted;
    private javax.swing.JLabel jlFilesNotConverted;
    private javax.swing.JLabel jlFilesProcessed;
    private javax.swing.JLabel jlFilesWithWarnings;
    private javax.swing.JLabel jlResult;
    private javax.swing.JLabel jlStatus;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler, ArrayList<String> fileNames,
            String objFolderPath, String imdFolderPath) {
        this.handler = handler;
        this.fileNames = fileNames;
        this.objFolderPath = objFolderPath;
        this.imdFolderPath = imdFolderPath;
    }

    public void saveAllImds() {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

        int nFilesProcessed = 0;
        int nFilesConverted = 0;
        int nFilesConvertedWithWarnings = 0;
        int nFilesNotConverted = 0;
        for (String fileName : fileNames) {
            if (!Thread.currentThread().isInterrupted()) {
                System.out.println(nFilesProcessed + " OBJ Processing...");
                String objFileName = Utils.removeExtensionFromPath(fileName) + ".obj";
                String imdFileName = Utils.removeExtensionFromPath(fileName) + ".imd";

                String pathOpen = objFolderPath + File.separator + objFileName;
                String pathSave = imdFolderPath + File.separator + imdFileName;

                ConvertStatus exportStatus;
                ImdModel model = null;
                try {
                    model = new ImdModel(pathOpen, pathSave, handler.getTileset().getMaterials());

                    final int maxNumPolygons = 1300;
                    final int maxNumTris = 1200;
                    if (model.getNumTris() > maxNumTris) {
                        exportStatus = ConvertStatus.TOO_MANY_TRIANGLES_STATUS;
                    } else if (model.getNumPolygons() > maxNumPolygons) {
                        exportStatus = ConvertStatus.TOO_MANY_POLYGONS_STATUS;
                    } else {
                        exportStatus = ConvertStatus.SUCCESS_STATUS;
                    }
                } catch (ParserConfigurationException | TransformerException ex) {
                    exportStatus = ConvertStatus.XML_ERROR_STATUS;
                } catch (IOException ex) {
                    exportStatus = ConvertStatus.IO_ERROR_STATUS;
                } catch (TextureNotFoundException ex) {
                    exportStatus = ConvertStatus.TEXURE_ERROR_STATUS;
                } catch (NormalsNotFoundException ex) {
                    exportStatus = ConvertStatus.NORMALS_ERROR_STATUS;
                } catch (Exception ex) {
                    exportStatus = ConvertStatus.UNKNOWN_ERROR_STATUS;
                }

                if (exportStatus == ConvertStatus.SUCCESS_STATUS) {
                    tableModel.addRow(new Object[]{
                        fileName,
                        exportStatus,
                        model.getNumMaterials(),
                        model.getNumVertices(),
                        model.getNumPolygons(),
                        model.getNumTris(),
                        model.getNumQuads()
                    });

                    nFilesConverted++;
                } else if (exportStatus == ConvertStatus.TOO_MANY_TRIANGLES_STATUS
                        || exportStatus == ConvertStatus.TOO_MANY_POLYGONS_STATUS) {
                    tableModel.addRow(new Object[]{
                        fileName,
                        exportStatus,
                        model.getNumMaterials(),
                        model.getNumVertices(),
                        model.getNumPolygons(),
                        model.getNumTris(),
                        model.getNumQuads()
                    });

                    nFilesConvertedWithWarnings++;
                    nFilesConverted++;
                } else {
                    tableModel.addRow(new Object[]{
                        fileName,
                        exportStatus,
                        "---",
                        "---",
                        "---",
                        "---",
                        "---"
                    });

                    nFilesNotConverted++;
                }

                nFilesProcessed++;

                jlFilesProcessed.setText(String.valueOf(nFilesProcessed) + "/" + String.valueOf(fileNames.size()));
                jlFilesConverted.setText(String.valueOf(nFilesConverted));
                jlFilesWithWarnings.setText(String.valueOf(nFilesConvertedWithWarnings));
                jlFilesNotConverted.setText(String.valueOf(nFilesNotConverted));

                jProgressBar1.setValue((nFilesProcessed * 100) / fileNames.size());
            }
        }

        if(nFilesConverted > 0){
            jlFilesConverted.setForeground(GREEN);
        }
        
        if (nFilesConvertedWithWarnings > 0) {
            jlFilesWithWarnings.setForeground(ORANGE);
        }

        if (nFilesNotConverted > 0) {
            jlFilesNotConverted.setForeground(RED);
        }

        if (nFilesNotConverted > 0) {
            jlStatus.setForeground(RED);
            jlStatus.setText("Finished with errors");

            jlResult.setForeground(RED);
            jlResult.setText(String.valueOf(nFilesNotConverted) + " OBJ file(s) could not be converted into IMD");
        } else if (nFilesConvertedWithWarnings > 0) {
            jlStatus.setForeground(ORANGE);
            jlStatus.setText("Finished with warnings");

            jlResult.setForeground(ORANGE);
            jlResult.setText("All the OBJ files have been converted into IMD (" + String.valueOf(nFilesConvertedWithWarnings) + " file(s) might have too many polygons)");
        } else {
            jlStatus.setForeground(GREEN);
            jlStatus.setText("Finished");

            jlResult.setForeground(GREEN);
            jlResult.setText("All the OBJ files have been converted into IMD");
        }

        jbAccept.setEnabled(true);
        
        getRootPane().setDefaultButton(jbAccept);
        jbAccept.requestFocus();
    }

    private class StatusColumnCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {

            //Cells are by default rendered as a JLabel.
            JLabel l = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);

            ConvertStatus status = (ConvertStatus) value;
            l.setForeground(status.color);
            l.setText(status.msg);

            Font font = l.getFont();
            font = font.deriveFont(
                    Collections.singletonMap(
                            TextAttribute.WEIGHT, TextAttribute.WEIGHT_BOLD));
            l.setFont(font);

            setHorizontalAlignment(JLabel.CENTER);

            //Return the JLabel which renders the cell.
            return l;

        }
    }

    
}
