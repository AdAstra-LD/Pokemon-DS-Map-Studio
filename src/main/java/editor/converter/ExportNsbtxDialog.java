/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.converter;

import editor.handler.MapEditorHandler;
import java.io.File;
import java.io.FilenameFilter;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import utils.Utils;

/**
 *
 * @author Trifindo
 */
public class ExportNsbtxDialog extends javax.swing.JDialog {

    public static final int APPROVE_OPTION = 1, CANCEL_OPTION = 0;
    private int returnValue = CANCEL_OPTION;

    private String nsbtxFolderPath = "";
    private ArrayList<Integer> selectedAreaIndices = new ArrayList<>();
    private ArrayList<Integer> areaIndices;
    
    private MapEditorHandler handler;

    /**
     * Creates new form ExportImdDialog
     */
    public ExportNsbtxDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        getRootPane().setDefaultButton(jbAccept);
        jbAccept.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollCheckboxList = new utils.swing.JScrollCheckboxList();
        jbSelectAll = new javax.swing.JButton();
        jbDeselectAll = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jbAccept = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jtfNsbtxFolderPath = new javax.swing.JTextField();
        jbNsbBrowse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export Areas as NSBTX (Experimental)");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("NSBTX settings"));

        jLabel1.setText("Select the areas that will be exported as NSBTX:");

        jScrollCheckboxList.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollCheckboxList.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jbSelectAll.setText("Select All");
        jbSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSelectAllActionPerformed(evt);
            }
        });

        jbDeselectAll.setText("Deselect All");
        jbDeselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeselectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollCheckboxList, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbSelectAll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbDeselectAll)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollCheckboxList, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbSelectAll)
                    .addComponent(jbDeselectAll))
                .addContainerGap())
        );

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        jbAccept.setText("OK");
        jbAccept.setPreferredSize(new java.awt.Dimension(65, 23));
        jbAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAcceptActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("NSBTX settings"));

        jLabel3.setText("NSBTX destination folder path:");

        jtfNsbtxFolderPath.setEditable(false);

        jbNsbBrowse.setText("Browse...");
        jbNsbBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNsbBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfNsbtxFolderPath, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbNsbBrowse)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfNsbtxFolderPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbNsbBrowse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbAccept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCancel)
                    .addComponent(jbAccept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAcceptActionPerformed
        if (!new File(nsbtxFolderPath).exists()) {
            JOptionPane.showMessageDialog(this,
                    "Please select a valid output folder for exporting the NSBTX files.",
                    "Invalid NSBTX folder",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            DefaultListModel<JCheckBox> model = (DefaultListModel<JCheckBox>) jScrollCheckboxList.getCheckboxList().getModel();
            selectedAreaIndices = new ArrayList<>(model.getSize());
            for (int i = 0; i < model.getSize(); i++) {
                if (model.get(i).isSelected()) {
                    selectedAreaIndices.add(areaIndices.get(i));
                }
            }
            if (selectedAreaIndices.size() > 0) {
                returnValue = APPROVE_OPTION;
                dispose();
            } else {
                JOptionPane.showMessageDialog(this,
                        "There are no Areas selected for converting into NSBTX.\n"
                        + "Select at least one Area from the list.", "No Areas selected",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbAcceptActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        returnValue = CANCEL_OPTION;
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jbSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSelectAllActionPerformed
        DefaultListModel<JCheckBox> model = (DefaultListModel<JCheckBox>) jScrollCheckboxList.getCheckboxList().getModel();
        for (int i = 0; i < model.getSize(); i++) {
            model.get(i).setSelected(true);
        }
        jScrollCheckboxList.repaint();
    }//GEN-LAST:event_jbSelectAllActionPerformed

    private void jbDeselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeselectAllActionPerformed
        DefaultListModel<JCheckBox> model = (DefaultListModel<JCheckBox>) jScrollCheckboxList.getCheckboxList().getModel();
        for (int i = 0; i < model.getSize(); i++) {
            model.get(i).setSelected(false);
        }
        jScrollCheckboxList.repaint();
    }//GEN-LAST:event_jbDeselectAllActionPerformed

    private void jbNsbBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNsbBrowseActionPerformed
        final JFileChooser fc = new JFileChooser();
        File folder = new File(Utils.removeExtensionFromPath(handler.getMapMatrix().filePath)).getParentFile();
        fc.setCurrentDirectory(folder);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setApproveButtonText("Select folder");
        fc.setDialogTitle("Select the folder for exporting the IMD files");

        int returnValOpen = fc.showOpenDialog(this);
        if (returnValOpen == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            if (file.exists() && file.isDirectory()) {
                nsbtxFolderPath = file.getPath();
                jtfNsbtxFolderPath.setText(nsbtxFolderPath);
            }
        }
    }//GEN-LAST:event_jbNsbBrowseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private utils.swing.JScrollCheckboxList jScrollCheckboxList;
    private javax.swing.JButton jbAccept;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDeselectAll;
    private javax.swing.JButton jbNsbBrowse;
    private javax.swing.JButton jbSelectAll;
    private javax.swing.JTextField jtfNsbtxFolderPath;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler) {
        this.handler = handler;

        loadAreaIndices();

        String nsbtxFolderPath = new File(Utils.removeExtensionFromPath(handler.getMapMatrix().filePath)).getParent();
        if (isFolderPathValid(nsbtxFolderPath)) {
            this.nsbtxFolderPath = nsbtxFolderPath;
            jtfNsbtxFolderPath.setText(nsbtxFolderPath);
        }

    }

    private boolean isFolderPathValid(String folderPath) {
        try {
            File file = new File(folderPath);
            return file.isDirectory();
        } catch (Exception ex) {
            return false;
        }
    }

    private void loadAreaIndices(){
        
        HashSet<Integer> areaIndicesSet = handler.getMapMatrix().getAreaIndices();
        
        areaIndices = new ArrayList();
        areaIndices.addAll(areaIndicesSet);
        
        try {
            DefaultListModel<JCheckBox> model = new DefaultListModel();
            this.jScrollCheckboxList.getCheckboxList().setModel(model);
            for (Integer areaIndex : areaIndicesSet) {
                model.addElement(new JCheckBox("Area " + String.valueOf(areaIndex)));
            }

            for (int i = 0; i < model.getSize(); i++) {
                model.get(i).setSelected(true);
            }
            jScrollCheckboxList.getCheckboxList().setModel(model);
        } catch (Exception ex) {

        }
    }

    private boolean hasMatrixCoordsInImdName(String imdName) {
        String name = Utils.removeExtensionFromPath(imdName);
        try {
            String[] splitName = name.split("_");
            return (hasCoordInName(splitName[splitName.length - 2])
                    && hasCoordInName(splitName[splitName.length - 1]));
        } catch (Exception ex) {
            return false;
        }
    }

    private boolean hasCoordInName(String name) {
        try {
            Integer.parseInt(name);
            return true;
        } catch (Exception ex) {
            return false;
        }
    }

    public int getReturnValue() {
        return returnValue;
    }

    public String getNsbtxFolderPath() {
        return nsbtxFolderPath;
    }

    public ArrayList<Integer> getSelectedAreaIndices() {
        return selectedAreaIndices;
    }

    

}
