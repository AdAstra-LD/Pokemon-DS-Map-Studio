/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.collisions;

import editor.handler.MapEditorHandler;
import editor.state.CollisionLayerState;
import java.awt.AlphaComposite;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import javax.swing.SwingUtilities;
import utils.Utils;

/**
 *
 * @author Trifindo
 */
public class CollisionsDisplay extends javax.swing.JPanel {

    private MapEditorHandler handler;
    private CollisionHandler collHandler;

    private BufferedImage mapImage;

    private static final int cols = 32, rows = 32;
    private static final int tileSize = 16;
    private static final int width = cols * tileSize, height = rows * tileSize;
    
    public float transparency = 0.5f;

    /**
     * Creates new form CollisionsDisplay
     */
    public CollisionsDisplay() {
        initComponents();

        setPreferredSize(new Dimension(width, height));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        handler.setLayerChanged(false);
        if(SwingUtilities.isLeftMouseButton(evt)){
            collHandler.addLayerState(new CollisionLayerState("Draw collision", collHandler));
            setCollision(evt);
        } else if(SwingUtilities.isMiddleMouseButton(evt)){
            collHandler.addLayerState(new CollisionLayerState("Flood fill collision", collHandler));
            floodFillCollision(evt);
        } else if(SwingUtilities.isRightMouseButton(evt)){
            setIndexSelected(evt);
        }
        
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if(SwingUtilities.isLeftMouseButton(evt)){
            //collHandler.addMapState(new CollisionLayerState("Draw collision", collHandler));
            setCollision(evt);
        }
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        collHandler.getDialog().redrawSelectedLayerInSelector();
        collHandler.getDialog().repaintLayerSelector();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        int delta = evt.getWheelRotation() > 0 ? 1 : -1;
        collHandler.incrementCollisionSelected(delta);
        collHandler.getDialog().repaintTypesDisplay();
        collHandler.getDialog().updateViewCollisionTypeName();
    }//GEN-LAST:event_formMouseWheelMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (mapImage != null) {
            g.drawImage(mapImage, 0, 0, null);
        }

        if (handler != null && handler.getCollisions() != null && collHandler != null) {
            drawCollisions(g, handler.getCollisions());
        }

        //g.setColor(Color.white);
        //drawGrid(g);
    }

    public void init(MapEditorHandler handler, BufferedImage mapImage,
            CollisionHandler collisionHandler) {
        this.handler = handler;
        this.mapImage = mapImage;
        this.collHandler = collisionHandler;
    }

    
    private void setIndexSelected(java.awt.event.MouseEvent evt) {
        int c = evt.getX() / tileSize;
        int r = evt.getY() / tileSize;

        if (new Rectangle(0, 0, cols, rows).contains(c, r)) {
            collHandler.setIndexCollisionSelected(collHandler.getValue(c, r));
            collHandler.getDialog().repaintTypesDisplay();
            collHandler.getDialog().updateViewCollisionTypeName();
            repaint();
        }
    }

    
    private void setCollision(java.awt.event.MouseEvent evt) {
        int c = evt.getX() / tileSize;
        int r = evt.getY() / tileSize;

        if (new Rectangle(0, 0, cols, rows).contains(c, r)) {
            collHandler.setValue(collHandler.getIndexCollisionSelected(), c, r);
            repaint();
        }
    }

    private void floodFillCollision(java.awt.event.MouseEvent evt){
        int c = evt.getX() / tileSize;
        int r = evt.getY() / tileSize;
        if (new Rectangle(0, 0, cols, rows).contains(c, r)) {
            Utils.floodFillMatrix(collHandler.getLayerSelected(), c, r, 
                    (byte)collHandler.getIndexCollisionSelected());
            collHandler.setValue(collHandler.getIndexCollisionSelected(), c, r);
            repaint();
        }
    }
    
    private void drawCollisions(Graphics g, Collisions collisions) {
        Graphics2D g2d = (Graphics2D) g;
        g2d.setComposite(AlphaComposite.SrcOver.derive(transparency));
        for (int i = 0; i < Collisions.cols; i++) {
            for (int j = 0; j < Collisions.rows; j++) {
                int value = collisions.getValue(collHandler.getIndexLayerSelected(), i, j);
                g.drawImage(collHandler.getImage(value),
                        i * tileSize, j * tileSize, null);
            }
        }
    }

    private void drawGrid(Graphics g) {
        for (int i = 0; i < cols; i++) {
            g.drawLine(i * tileSize, 0, i * tileSize, height);
        }

        for (int i = 0; i < rows; i++) {
            g.drawLine(0, i * tileSize, width, i * tileSize);
        }
    }


}
