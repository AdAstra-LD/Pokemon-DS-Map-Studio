/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.mapmatrix;

import editor.grid.MapGrid;
import editor.handler.MapData;
import editor.handler.MapEditorHandler;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 *
 * @author Trifindo
 */
public class MapMatrixDisplay extends javax.swing.JPanel {

    private MapEditorHandler handler;

    private BufferedImage mapsImg;

    private Dimension matrixSize;
    private Point matrixMin = new Point();

    private float scale = 0.5f;

    
    /**
     * Creates new form MapMatrixDisplay
     */
    public MapMatrixDisplay() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        int x = evt.getX();
        int y = evt.getY();
        //int mapX = Math.floorDiv((int) Math.floor(x * scale), MapData.mapThumbnailSize);
        //int mapY = Math.floorDiv((int) Math.floor(y * scale), MapData.mapThumbnailSize);
        int mapX = Math.floorDiv(x, (int) (MapData.mapThumbnailSize * scale));
        int mapY = Math.floorDiv(y, (int) (MapData.mapThumbnailSize * scale));
        Point mapCoords = new Point(mapX + matrixMin.x, mapY + matrixMin.y);
        //System.out.println("Point pressed: " + mapCoords.x + " " + mapCoords.y);

        if (handler != null) {
            Set<Point> maps = handler.getMapMatrix().getMatrix().keySet();
            if (maps.contains(mapCoords)) {
                //System.out.println("Map selected: " + mapCoords.x + " " + mapCoords.y);

                if (!mapCoords.equals(handler.getMapSelected())) {
                    handler.setMapSelected(mapCoords, false);
                    handler.getMainFrame().getMapDisplay().setCameraAtMap(mapCoords);

                    handler.getMainFrame().getMapDisplay().repaint();
                } else {
                    handler.getMainFrame().getMapDisplay().setCameraAtMap(mapCoords);
                    handler.getMainFrame().getMapDisplay().repaint();
                }

                repaint();
            }
        }

    }//GEN-LAST:event_formMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void init(MapEditorHandler handler) {
        this.handler = handler;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        //g.setColor(Color.darkGray);
        //g.fillRect(0, 0, getWidth(), getHeight());
        Graphics2D g2d = (Graphics2D) g;
        AffineTransform transform = g2d.getTransform();

        g2d.setRenderingHints(new RenderingHints(
                RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR));//RenderingHints.VALUE_INTERPOLATION_BILINEAR));

        g2d.scale(scale, scale);

        if (handler != null) {
            if (mapsImg != null) {
                g.drawImage(mapsImg, 0, 0, null);
            }

            Point selectedMap = handler.getMapSelected();
            g2d.setColor(new Color(1.0f, 0.0f, 0.0f, 0.2f));
            g2d.fillRect(
                    (selectedMap.x - matrixMin.x) * MapData.mapThumbnailSize,
                    (selectedMap.y - matrixMin.y) * MapData.mapThumbnailSize,
                    MapData.mapThumbnailSize - 1, MapData.mapThumbnailSize - 1);

            g2d.setColor(Color.white);
            g2d.setStroke(new BasicStroke(4));
            g2d.drawRect(
                    (selectedMap.x - matrixMin.x) * MapData.mapThumbnailSize,
                    (selectedMap.y - matrixMin.y) * MapData.mapThumbnailSize,
                    MapData.mapThumbnailSize - 1, MapData.mapThumbnailSize - 1);

            g2d.setColor(Color.red);
            g2d.setStroke(new BasicStroke(4));
            g2d.drawRect(
                    (selectedMap.x - matrixMin.x) * MapData.mapThumbnailSize - 3,
                    (selectedMap.y - matrixMin.y) * MapData.mapThumbnailSize - 3,
                    MapData.mapThumbnailSize + 6, MapData.mapThumbnailSize + 6);
            g2d.setStroke(new BasicStroke(1));

        }

        g2d.setTransform(transform);
    }
    
    

    public void updateMapsImage() {
        this.mapsImg = handler.getMapMatrix().getMapMatrixImage();
        repaint();
    }

    public void updateSize() {
        this.matrixMin = handler.getMapMatrix().getMinCoords();
        this.matrixSize = handler.getMapMatrix().getMatrixSize();

        this.setPreferredSize(new Dimension(
                (int) (matrixSize.width * MapData.mapThumbnailSize * scale),
                (int) (matrixSize.height * MapData.mapThumbnailSize * scale)));
        //this.revalidate();
    }

    public float getScale() {
        return scale;
    }

    
}
