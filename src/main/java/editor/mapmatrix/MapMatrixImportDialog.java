/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.mapmatrix;

import editor.handler.MapData;
import editor.handler.MapEditorHandler;
import java.awt.Point;
import java.io.File;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author Trifindo
 */
public class MapMatrixImportDialog extends javax.swing.JDialog {

    private MapEditorHandler handler;
    private String mapPath;
    private HashMap<Point, MapData> maps;

    /**
     * Creates new form MapMatrixImportDialog
     */
    public MapMatrixImportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        jScrollPane1.getHorizontalScrollBar().setUnitIncrement(16);
        jScrollPane1.getVerticalScrollBar().setUnitIncrement(16);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mapImportDisplay1 = new editor.mapmatrix.MapImportDisplay();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jbUp = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jbLeft = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jbRight = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jbDown = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jbImport = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Choose where to import the maps");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose where to import the map"));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout mapImportDisplay1Layout = new javax.swing.GroupLayout(mapImportDisplay1);
        mapImportDisplay1.setLayout(mapImportDisplay1Layout);
        mapImportDisplay1Layout.setHorizontalGroup(
            mapImportDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        mapImportDisplay1Layout.setVerticalGroup(
            mapImportDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 235, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(mapImportDisplay1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Move Map", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanel2.setPreferredSize(new java.awt.Dimension(100, 110));
        jPanel2.setLayout(new java.awt.GridLayout(3, 3));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel3);

        jbUp.setText("▲");
        jbUp.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpActionPerformed(evt);
            }
        });
        jPanel2.add(jbUp);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel4);

        jbLeft.setText("◄");
        jbLeft.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLeftActionPerformed(evt);
            }
        });
        jPanel2.add(jbLeft);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel5);

        jbRight.setText("►");
        jbRight.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRightActionPerformed(evt);
            }
        });
        jPanel2.add(jbRight);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel6);

        jbDown.setText("▼");
        jbDown.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jbDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDownActionPerformed(evt);
            }
        });
        jPanel2.add(jbDown);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 29, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel7);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jbImport.setText("Import");
        jbImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportActionPerformed(evt);
            }
        });

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbImport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbImport)
                    .addComponent(jbCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpActionPerformed
        mapImportDisplay1.moveMap(new Point(0, -1));
        mapImportDisplay1.repaint();
    }//GEN-LAST:event_jbUpActionPerformed

    private void jbDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDownActionPerformed
        mapImportDisplay1.moveMap(new Point(0, 1));
        mapImportDisplay1.repaint();
    }//GEN-LAST:event_jbDownActionPerformed

    private void jbLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLeftActionPerformed
        mapImportDisplay1.moveMap(new Point(-1, 0));
        mapImportDisplay1.repaint();
    }//GEN-LAST:event_jbLeftActionPerformed

    private void jbRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRightActionPerformed
        mapImportDisplay1.moveMap(new Point(1, 0));
        mapImportDisplay1.repaint();
    }//GEN-LAST:event_jbRightActionPerformed

    private void jbImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportActionPerformed
        if (isNewMapOverlapingWithMap()) {
            int returnValue = JOptionPane.showConfirmDialog(this,
                    "The new map is overlapping with the current map.\n"
                    + "The maps that are overlapping will be removed.\n"
                    + "Do you want to continue?",
                    "Maps overlapping",
                    JOptionPane.YES_NO_OPTION);
            if (returnValue == JOptionPane.YES_OPTION) {
                importMaps();
                dispose();
            }
        } else {
            importMaps();
            dispose();
        }
    }//GEN-LAST:event_jbImportActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbDown;
    private javax.swing.JButton jbImport;
    private javax.swing.JButton jbLeft;
    private javax.swing.JButton jbRight;
    private javax.swing.JButton jbUp;
    private editor.mapmatrix.MapImportDisplay mapImportDisplay1;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler, String mapPath, HashMap<Point, MapData> maps) {
        this.handler = handler;
        this.mapPath = mapPath;
        this.maps = maps;

        mapImportDisplay1.init(handler, maps);
        mapImportDisplay1.updateMapsImage();
        mapImportDisplay1.updateSize();
    }

    private boolean isNewMapOverlapingWithMap() {
        Point pos = mapImportDisplay1.getNewMapPos();
        for (Point p : maps.keySet()) {
            Point mapCoords = new Point(p.x + pos.x, p.y + pos.y);
            if (handler.getMapMatrix().getMatrix().containsKey(mapCoords)) {
                return true;
            }
        }
        return false;
    }

    public void importMaps() {
        try {
            handler.getMapMatrix().addMapsFromFile(maps, mapImportDisplay1.getNewMapPos(),
                    new File(mapPath).getParent(),
                    new File(mapPath).getName()
            );

            try {
                handler.getMainFrame().updateViewAllMapData();
            } catch (Exception ex2) {

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                                    "There was a problem importing the maps",
                                    "Can't import maps",
                                    JOptionPane.ERROR_MESSAGE);
        }
    }
}
