/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.nsbtx;

import editor.handler.MapEditorHandler;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.SpinnerUI;
import utils.Utils;

/**
 *
 * @author Trifindo
 */
public class NsbtxEditorDialog extends javax.swing.JDialog {

    private MapEditorHandler handler;
    private NsbtxHandler nsbtxHandler;

    private boolean textureListEnabled = true;
    private boolean paletteListEnabled = true;
    private boolean colorSpinersEnabled = true;

    /**
     * Creates new form NsbtxEditorDialog
     */
    public NsbtxEditorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        int min = 0;
        int max = 248;
        int step = 8;

        SpinnerNumberModel modelRed = new SpinnerNumberModel(min, min, max, step);
        SpinnerNumberModel modelGreen = new SpinnerNumberModel(min, min, max, step);
        SpinnerNumberModel modelBlue = new SpinnerNumberModel(min, min, max, step);
        jSpinnerRed.setModel(modelRed);
        jSpinnerGreen.setModel(modelGreen);
        jSpinnerBlue.setModel(modelBlue);

        /*
        textureNamesList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    updateViewPaletteNamesUsingTexNames();
                }
            }
        });*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textureNamesList = new JList<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        paletteNamesList = new JList<>();
        jPanel3 = new javax.swing.JPanel();
        nsbtxDisplay = new NsbtxDisplay();
        jPanel4 = new javax.swing.JPanel();
        paletteDisplay = new PaletteDisplay();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerRed = new JSpinner();
        jSpinnerGreen = new JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSpinnerBlue = new JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmOpenNsbtx = new javax.swing.JMenuItem();
        jmSaveNsbtx = new javax.swing.JMenuItem();
        jmSaveNsbtxAs = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("NSBTX Editor (Pokemon Map Tilesets ONLY) - Experimental! Use with caution!");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Texture Names"));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        textureNamesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                textureNamesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(textureNamesList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette Names"));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        paletteNamesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                paletteNamesListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(paletteNamesList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Texture"));

        nsbtxDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(102, 102, 102)));

        javax.swing.GroupLayout nsbtxDisplayLayout = new javax.swing.GroupLayout(nsbtxDisplay);
        nsbtxDisplay.setLayout(nsbtxDisplayLayout);
        nsbtxDisplayLayout.setHorizontalGroup(
            nsbtxDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        nsbtxDisplayLayout.setVerticalGroup(
            nsbtxDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nsbtxDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nsbtxDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette Display"));

        javax.swing.GroupLayout paletteDisplayLayout = new javax.swing.GroupLayout(paletteDisplay);
        paletteDisplay.setLayout(paletteDisplayLayout);
        paletteDisplayLayout.setHorizontalGroup(
            paletteDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );
        paletteDisplayLayout.setVerticalGroup(
            paletteDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 16, Short.MAX_VALUE)
        );

        jLabel1.setText("R: ");

        jSpinnerRed.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerRedStateChanged(evt);
            }
        });

        jSpinnerGreen.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerGreenStateChanged(evt);
            }
        });

        jLabel2.setText("G: ");

        jLabel3.setText("B: ");

        jSpinnerBlue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerBlueStateChanged(evt);
            }
        });

        jButton1.setText("◄");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("►");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Move color:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerGreen, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerBlue, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinnerRed, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(paletteDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paletteDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinnerRed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jSpinnerGreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinnerBlue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Editor"));

        jButton3.setText("Import Texture and Palette");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Import Texture Only");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Export Image");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 155, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        jmOpenNsbtx.setText("Open NSBTX...");
        jmOpenNsbtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmOpenNsbtxActionPerformed(evt);
            }
        });
        jMenu1.add(jmOpenNsbtx);

        jmSaveNsbtx.setText("Save NSBTX...");
        jmSaveNsbtx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSaveNsbtxActionPerformed(evt);
            }
        });
        jMenu1.add(jmSaveNsbtx);

        jmSaveNsbtxAs.setText("Save NSBTX as...");
        jmSaveNsbtxAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmSaveNsbtxAsActionPerformed(evt);
            }
        });
        jMenu1.add(jmSaveNsbtxAs);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textureNamesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_textureNamesListValueChanged
        if (nsbtxHandler.getNsbtx() != null && textureListEnabled) {
            nsbtxHandler.setTextureIndexSelected(textureNamesList.getSelectedIndex());
            updateViewPaletteNamesUsingTexNames();
            updateView();
        }
    }//GEN-LAST:event_textureNamesListValueChanged

    private void paletteNamesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_paletteNamesListValueChanged
        if (nsbtxHandler.getNsbtx() != null && paletteListEnabled) {
            nsbtxHandler.setPaletteIndexSelected(paletteNamesList.getSelectedIndex());
            updateView();
        }
    }//GEN-LAST:event_paletteNamesListValueChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            saveTextureWithDialog();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            importTextureOnlyWithDialog();
            nsbtxDisplay.updateImage();
            nsbtxDisplay.repaint();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jSpinnerRedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerRedStateChanged
        if (nsbtxHandler.getNsbtx() != null) {
            if (colorSpinersEnabled) {
                changeColorUsingSpinnerValue(jSpinnerRed);
            }
        }
    }//GEN-LAST:event_jSpinnerRedStateChanged

    private void jSpinnerGreenStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerGreenStateChanged
        if (nsbtxHandler.getNsbtx() != null) {
            if (colorSpinersEnabled) {
                changeColorUsingSpinnerValue(jSpinnerGreen);
            }
        }
    }//GEN-LAST:event_jSpinnerGreenStateChanged

    private void jSpinnerBlueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerBlueStateChanged
        if (nsbtxHandler.getNsbtx() != null) {
            if (colorSpinersEnabled) {
                changeColorUsingSpinnerValue(jSpinnerBlue);
            }
        }
    }//GEN-LAST:event_jSpinnerBlueStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            if (nsbtxHandler.getColorIndexSelected() > 0) {
                moveColor(-1);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            if (nsbtxHandler.getColorIndexSelected() < nsbtxHandler.getNumColorsInSelectedPalette() - 1) {
                moveColor(1);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            importTextureAndPaletteWithDialog();
            nsbtxDisplay.updateImage();
            nsbtxDisplay.repaint();

            paletteDisplay.updatePalette();
            paletteDisplay.repaint();
            updateViewColorValues();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jmOpenNsbtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmOpenNsbtxActionPerformed
        openNsbtxWithDialog();
    }//GEN-LAST:event_jmOpenNsbtxActionPerformed

    private void jmSaveNsbtxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSaveNsbtxActionPerformed
        if (nsbtxHandler.getNsbtx() != null) {
            saveNsbtx();
        }
    }//GEN-LAST:event_jmSaveNsbtxActionPerformed

    private void jmSaveNsbtxAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmSaveNsbtxAsActionPerformed
        if (nsbtxHandler != null) {
            saveNsbtxWithDialog();
        }
    }//GEN-LAST:event_jmSaveNsbtxAsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NsbtxEditorDialog.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            Logger.getLogger(NsbtxEditorDialog.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            Logger.getLogger(NsbtxEditorDialog.class
                    .getName()).log(Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(NsbtxEditorDialog.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NsbtxEditorDialog dialog = new NsbtxEditorDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private JSpinner jSpinnerBlue;
    private JSpinner jSpinnerGreen;
    private JSpinner jSpinnerRed;
    private javax.swing.JMenuItem jmOpenNsbtx;
    private javax.swing.JMenuItem jmSaveNsbtx;
    private javax.swing.JMenuItem jmSaveNsbtxAs;
    private NsbtxDisplay nsbtxDisplay;
    private PaletteDisplay paletteDisplay;
    private JList<String> paletteNamesList;
    private JList<String> textureNamesList;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler) {
        this.handler = handler;
        this.nsbtxHandler = new NsbtxHandler(handler, this);
        this.nsbtxDisplay.init(nsbtxHandler);
        this.paletteDisplay.init(nsbtxHandler);


    }

    public void updateView() {
        nsbtxDisplay.updateImage();
        nsbtxDisplay.repaint();

        paletteDisplay.updatePalette();
        paletteDisplay.repaint();

        nsbtxHandler.setColorIndexSelected(0);

        updateViewColorValues();

    }

    public void updateViewTextureNames() {
        textureListEnabled = false;
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < nsbtxHandler.getNsbtx().textureNames.size(); i++) {
            String name = nsbtxHandler.getNsbtx().textureNames.get(i);
            demoList.addElement(name);
        }
        textureNamesList.setModel(demoList);
        textureNamesList.setSelectedIndex(nsbtxHandler.getTextureIndexSelected());
        textureListEnabled = true;
    }

    public void updateViewPaletteNames() {
        paletteListEnabled = false;
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < nsbtxHandler.getNsbtx().paletteNames.size(); i++) {
            String name = nsbtxHandler.getNsbtx().paletteNames.get(i);
            demoList.addElement(name);
        }
        paletteNamesList.setModel(demoList);
        paletteNamesList.setSelectedIndex(nsbtxHandler.getPaletteIndexSelected());
        paletteListEnabled = true;
    }

    private void updateViewPaletteNamesUsingTexNames() {
        int index = textureNamesList.getSelectedIndex();
        int paletteIndex;
        String paletteName = nsbtxHandler.getNsbtx().textureNames.get(index);
        if ((paletteIndex = nsbtxHandler.getNsbtx().paletteNames.indexOf(paletteName)) != -1
                || (paletteIndex = nsbtxHandler.getNsbtx().paletteNames.indexOf(setElementInString(paletteName, "_pl"))) != -1) {
            paletteNamesList.setSelectedIndex(paletteIndex);
            paletteNamesList.ensureIndexIsVisible(paletteNamesList.getSelectedIndex());
        }
    }

    public void updateViewColorValues() {
        if (paletteDisplay.palette != null) {
            colorSpinersEnabled = false;
            Color c = paletteDisplay.palette.get(nsbtxHandler.getColorIndexSelected());
            jSpinnerRed.setValue(c.getRed());
            jSpinnerGreen.setValue(c.getGreen());
            jSpinnerBlue.setValue(c.getBlue());
            colorSpinersEnabled = true;
        }
    }

    private String setElementInString(String src, String newPart) {
        return src.replaceFirst(" ", newPart).substring(0, Math.min(16, src.length()));
    }

    private void moveColor(int increment) {
        int index1 = nsbtxHandler.getColorIndexSelected();
        int index2 = nsbtxHandler.getColorIndexSelected() + increment;
        nsbtxHandler.getNsbtx().swapColors(
                nsbtxHandler.getTextureIndexSelected(),
                nsbtxHandler.getPaletteIndexSelected(),
                index1, index2);
        nsbtxHandler.incrementColorIndexSelected(increment);
        paletteDisplay.updatePaletteColor(index1);
        paletteDisplay.updatePaletteColor(index2);
        updateViewColorValues();
        paletteDisplay.updatePaletteColor(index1);
        paletteDisplay.updatePaletteColor(index2);
        paletteDisplay.repaint();
        nsbtxDisplay.updateImage();
        nsbtxDisplay.repaint();
    }

    private void changeColorUsingSpinnerValue(JSpinner spinner) {
        int value = (int) spinner.getValue();
        spinner.setValue(value - value % 8);
        if (nsbtxHandler.getNsbtx() != null) {
            Color color = new Color(
                    (int) jSpinnerRed.getValue(),
                    (int) jSpinnerGreen.getValue(),
                    (int) jSpinnerBlue.getValue());
            nsbtxHandler.getNsbtx().setColor(
                    nsbtxHandler.getPaletteIndexSelected(),
                    nsbtxHandler.getColorIndexSelected(),
                    color
            );
            paletteDisplay.updateSelectedPaletteColor();
            paletteDisplay.repaint();
            nsbtxDisplay.updateImage();
            nsbtxDisplay.repaint();
        }
    }

    public void saveTextureWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastNsbtxDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("PNG (*.png)", "png"));
        fc.setApproveButtonText("Save");
        fc.setDialogTitle("Save Texture as PNG");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                String path = fc.getSelectedFile().getPath();
                path = Utils.addExtensionToPath(path, "png");
                ImageIO.write(nsbtxHandler.getSelectedImage(), "png", new File(path));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't save file.",
                        "Error saving image", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void saveNsbtxWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastNsbtxDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("NSBTX (*.nsbtx)", Nsbtx.fileExtension));
        fc.setApproveButtonText("Save");
        fc.setDialogTitle("Save NSBTX");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                String path = fc.getSelectedFile().getPath();
                path = Utils.addExtensionToPath(path, Nsbtx.fileExtension);
                NsbtxWriter.saveNsbtx(nsbtxHandler.getNsbtx(), path);
                nsbtxHandler.setNsbtxPath(path);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't save file.",
                        "Error saving NSBTX", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void saveNsbtx() {
        try {
            String path = nsbtxHandler.getNsbtxPath();
            NsbtxWriter.saveNsbtx(nsbtxHandler.getNsbtx(), path);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Can't save file.",
                    "Error saving NSBTX", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void importTextureOnlyWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastNsbtxDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("PNG (*.png)", "png"));
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Open PNG Image");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                BufferedImage img = ImageIO.read(fc.getSelectedFile());

                if (img.getWidth() == nsbtxHandler.getSelectedTextureWidth()
                        && img.getHeight() == nsbtxHandler.getSelectedTextureHeight()) {
                    nsbtxHandler.getNsbtx().importTextureOnly(img,
                            nsbtxHandler.getTextureIndexSelected(),
                            nsbtxHandler.getPaletteIndexSelected());
                } else {
                    JOptionPane.showMessageDialog(this,
                            "The image imported does not have the same size as the one in the NSBTX",
                            "Error opening image", JOptionPane.ERROR_MESSAGE);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't open file.",
                        "Error opening image", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void importTextureAndPaletteWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastNsbtxDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("PNG (*.png)", "png"));
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Open PNG Image");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastNsbtxDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                BufferedImage img = ImageIO.read(fc.getSelectedFile());

                if (img.getWidth() == nsbtxHandler.getSelectedTextureWidth()
                        && img.getHeight() == nsbtxHandler.getSelectedTextureHeight()) {
                    nsbtxHandler.getNsbtx().importTextureAndPalette(img,
                            nsbtxHandler.getTextureIndexSelected(),
                            nsbtxHandler.getPaletteIndexSelected());
                } else {
                    JOptionPane.showMessageDialog(this,
                            "The image imported does not have the same size as the one in the NSBTX",
                            "Error opening image", JOptionPane.ERROR_MESSAGE);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't open file.",
                        "Error opening image", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void openNsbtxWithDialog() {
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastNsbtxDirectoryUsed()!= null) {
            fc.setCurrentDirectory(new File(handler.getLastNsbtxDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("NSBTX (*.nsbtx)", "nsbtx"));
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Open NSBTX Image");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            handler.setLastBuildDirectoryUsed(fc.getSelectedFile().getParent());
            try {
                nsbtxHandler.loadNsbtx(fc.getSelectedFile().getPath());
                updateView();
                updateViewTextureNames();
                updateViewPaletteNames();
                updateViewColorValues();

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Can't open file.",
                        "Error opening image", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

}
