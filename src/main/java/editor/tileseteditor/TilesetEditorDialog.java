/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.tileseteditor;

import com.jogamp.opengl.GLContext;
import editor.TilesetRenderer;
import editor.handler.MapEditorHandler;
import editor.obj.ObjWriter;
import editor.smartdrawing.SmartGrid;
import editor.vertexcolors.VColorEditorDialog;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import tileset.NormalsNotFoundException;
import tileset.TextureNotFoundException;
import tileset.Tile;
import tileset.Tileset;
import tileset.TilesetIO;
import utils.ThumbnailFileChooser;
import utils.Utils;

/**
 *
 * @author Trifindo
 */
public class TilesetEditorDialog extends javax.swing.JDialog {

    private MapEditorHandler handler;
    private TilesetEditorHandler tileHandler;

    private boolean jComboBoxListenerActive = true;
    private boolean jcbTexGenModeListenerActive = true;
    private boolean jcbTexTilingUListenerActive = true;
    private boolean jcbTexTilingVListenerActive = true;
    private boolean jcbColorFormatListenerActive = true;
    private MutableBoolean jtfMaterialNameActive = new MutableBoolean(true);
    private MutableBoolean jtfTextureNameActive = new MutableBoolean(true);
    private MutableBoolean jtfPaletteNameActive = new MutableBoolean(true);
    private boolean jsAlphaActive = true;
    private MutableBoolean jtfGlobalTexScaleActive = new MutableBoolean(true);
    private MutableBoolean jtfXOffsetActive = new MutableBoolean(true);
    private MutableBoolean jtfYOffsetActive = new MutableBoolean(true);

    private static final Color redColor = new Color(255, 200, 200);
    private static final Color greenColor = new Color(200, 255, 200);
    private static final Color whiteColor = Color.white;

    private ArrayList<ImageIcon> materialIcons = new ArrayList<>();

    /**
     * Creates new form TilesetEditor
     */
    public TilesetEditorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        jTabbedPane1.setIconAt(0, new ImageIcon(getClass().getResource("/icons/TileIcon.png")));
        jTabbedPane1.setIconAt(1, new ImageIcon(getClass().getResource("/icons/MaterialIcon2.png")));

        jScrollPane2.getVerticalScrollBar().setUnitIncrement(16);
        jScrollPaneSmartGrid.getVerticalScrollBar().setUnitIncrement(16);

        Color redColor = new Color(255, 200, 200);

        addListenerToJTextField(jtfMaterialName, jtfMaterialNameActive);
        addListenerToJTextField(jtfTextureName, jtfTextureNameActive);
        addListenerToJTextField(jtfPaletteName, jtfPaletteNameActive);
        addListenerToJTextField(jtfGlobalTexScale, jtfGlobalTexScaleActive);
        addListenerToJTextField(jtfXOffset, jtfXOffsetActive);
        addListenerToJTextField(jtfYOffset, jtfYOffsetActive);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tileDisplay = new TileDisplay();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tileSelector = new editor.tileselector.TileSelector();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jbRemoveTile = new javax.swing.JButton();
        jtfIndexTile = new JTextField();
        jbMoveDown = new javax.swing.JButton();
        jbMoveUp = new javax.swing.JButton();
        jLabel3 = new JLabel();
        jbDuplicateTile = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel10 = new JLabel();
        jcbTileableY = new javax.swing.JCheckBox();
        jtfGlobalTexScale = new JTextField();
        jbGlobalTexScale = new javax.swing.JButton();
        jbMoreSizeX = new javax.swing.JButton();
        jcbUtileable = new javax.swing.JCheckBox();
        jLabel2 = new JLabel();
        jcbVtileable = new javax.swing.JCheckBox();
        jLabel14 = new JLabel();
        jtfXOffset = new JTextField();
        jLabel15 = new JLabel();
        jtfYOffset = new JTextField();
        jtfSizeY = new JTextField();
        jbXOffset = new javax.swing.JButton();
        jbYOffset = new javax.swing.JButton();
        jLabel1 = new JLabel();
        jtfSizeX = new JTextField();
        jcbTileableX = new javax.swing.JCheckBox();
        jbLessSizeX = new javax.swing.JButton();
        jbMoreSizeY = new javax.swing.JButton();
        jbLessSizeY = new javax.swing.JButton();
        jcbGlobalTexMapping = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new JLabel();
        jtfObjName = new JTextField();
        jbExportTileAsObj = new javax.swing.JButton();
        jbImportTileAsObj = new javax.swing.JButton();
        jbEditVertexColors = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel16 = new JLabel();
        jtfNumTextures = new JTextField();
        jLabel4 = new JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jcbMaterial = new javax.swing.JComboBox<>();
        textureDisplay = new TextureDisplay();
        jbAddTexture = new javax.swing.JButton();
        jLabel22 = new JLabel();
        jbAddTile = new javax.swing.JButton();
        jLabel23 = new JLabel();
        jbImportTiles = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlistINames = new JList<>();
        jtfPaletteName = new JTextField();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jtfTextureName = new JTextField();
        jbTextName = new javax.swing.JButton();
        jbPaletteName = new javax.swing.JButton();
        jcbEnableFog = new javax.swing.JCheckBox();
        jcbRenderFrontAndBack = new javax.swing.JCheckBox();
        jcbUniformNormal = new javax.swing.JCheckBox();
        jLabel8 = new JLabel();
        jtfMaterialName = new JTextField();
        jbMaterialName = new javax.swing.JButton();
        jLabel9 = new JLabel();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel11 = new JLabel();
        jcbTexGenMode = new javax.swing.JComboBox<>();
        textureDisplayMaterial = new TextureDisplayMaterial();
        jcbAlwaysIncludedInImd = new javax.swing.JCheckBox();
        jbMoveMaterialUp = new javax.swing.JButton();
        jbMoveMaterialDown = new javax.swing.JButton();
        jbReplaceMaterial = new javax.swing.JButton();
        jLabel17 = new JLabel();
        jcbTexTilingU = new javax.swing.JComboBox<>();
        jLabel18 = new JLabel();
        jcbTexTilingV = new javax.swing.JComboBox<>();
        jLabel19 = new JLabel();
        jcbColorFormat = new javax.swing.JComboBox<>();
        jLabel20 = new JLabel();
        jcbL0 = new javax.swing.JCheckBox();
        jcbL1 = new javax.swing.JCheckBox();
        jcbL2 = new javax.swing.JCheckBox();
        jcbL3 = new javax.swing.JCheckBox();
        jbReplaceTexture = new javax.swing.JButton();
        jcbRenderBorder = new javax.swing.JCheckBox();
        jLabel21 = new JLabel();
        jcbUseVertexColors = new javax.swing.JCheckBox();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new JLabel();
        jbRotateModel = new javax.swing.JButton();
        jLabel13 = new JLabel();
        jbFlipModel = new javax.swing.JButton();
        jbMoveModelUp = new javax.swing.JButton();
        jbMoveModelDown = new javax.swing.JButton();
        jbMoveModelLeft = new javax.swing.JButton();
        jbMoveModelRight = new javax.swing.JButton();
        jbMoveModelUp1 = new javax.swing.JButton();
        jbMoveModelDown1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jcbBackfaceCulling = new javax.swing.JCheckBox();
        jcbWireframe = new javax.swing.JCheckBox();
        jcbTexturesEnabled = new javax.swing.JCheckBox();
        jcbShadingEnabled = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jScrollPaneSmartGrid = new javax.swing.JScrollPane();
        smartGridDisplay = new editor.smartdrawing.SmartGridDisplay();
        jbMoveSPaintUp = new javax.swing.JButton();
        jbMoveSPaintDown = new javax.swing.JButton();
        jbAddSmartGrid = new javax.swing.JButton();
        jbRemoveSmartGrid = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tileset Editor");
        setIconImage(null);
        setMinimumSize(new java.awt.Dimension(1094, 602));

        tileDisplay.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        tileDisplay.setPreferredSize(new java.awt.Dimension(350, 300));

        javax.swing.GroupLayout tileDisplayLayout = new javax.swing.GroupLayout(tileDisplay);
        tileDisplay.setLayout(tileDisplayLayout);
        tileDisplayLayout.setHorizontalGroup(
            tileDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        tileDisplayLayout.setVerticalGroup(
            tileDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tile Selector"));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tileSelector.setPreferredSize(new java.awt.Dimension(128, 0));
        tileSelector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tileSelectorMousePressed(evt);
            }
        });

        javax.swing.GroupLayout tileSelectorLayout = new javax.swing.GroupLayout(tileSelector);
        tileSelector.setLayout(tileSelectorLayout);
        tileSelectorLayout.setHorizontalGroup(
            tileSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );
        tileSelectorLayout.setVerticalGroup(
            tileSelectorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(tileSelector);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );

        jbRemoveTile.setIcon(new ImageIcon(getClass().getResource("/icons/RemoveTileIcon.png"))); // NOI18N
        jbRemoveTile.setText("Remove Tiles");
        jbRemoveTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveTileActionPerformed(evt);
            }
        });

        jtfIndexTile.setHorizontalAlignment(JTextField.CENTER);
        jtfIndexTile.setEnabled(false);

        jbMoveDown.setText("▼");
        jbMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveDownActionPerformed(evt);
            }
        });

        jbMoveUp.setText("▲");
        jbMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveUpActionPerformed(evt);
            }
        });

        jLabel3.setText("Tile selected: ");

        jbDuplicateTile.setIcon(new ImageIcon(getClass().getResource("/icons/DuplicateTileIcon.png"))); // NOI18N
        jbDuplicateTile.setText("Duplicate Tiles");
        jbDuplicateTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDuplicateTileActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Tile Properties"));

        jLabel10.setText("Texture Scale:");

        jcbTileableY.setForeground(new Color(0, 153, 0));
        jcbTileableY.setText("Y Tileable");
        jcbTileableY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTileableYActionPerformed(evt);
            }
        });

        jtfGlobalTexScale.setText(" ");

        jbGlobalTexScale.setText("Apply");
        jbGlobalTexScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGlobalTexScaleActionPerformed(evt);
            }
        });

        jbMoreSizeX.setText(">");
        jbMoreSizeX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoreSizeXActionPerformed(evt);
            }
        });

        jcbUtileable.setForeground(new Color(204, 0, 0));
        jcbUtileable.setText("Texture U Tileable");
        jcbUtileable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbUtileableActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new Color(0, 153, 0));
        jLabel2.setText("Y Size:");

        jcbVtileable.setForeground(new Color(0, 153, 0));
        jcbVtileable.setText("Texture V Tileable");
        jcbVtileable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbVtileableActionPerformed(evt);
            }
        });

        jLabel14.setForeground(new Color(204, 0, 0));
        jLabel14.setText("X Offset: ");

        jtfXOffset.setText(" ");

        jLabel15.setForeground(new Color(0, 153, 0));
        jLabel15.setText("Y Offset: ");

        jtfYOffset.setText(" ");

        jtfSizeY.setEditable(false);
        jtfSizeY.setHorizontalAlignment(JTextField.CENTER);

        jbXOffset.setText("Apply");
        jbXOffset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbXOffsetActionPerformed(evt);
            }
        });

        jbYOffset.setText("Apply");
        jbYOffset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbYOffsetActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new Color(204, 0, 0));
        jLabel1.setText("X Size:");

        jtfSizeX.setEditable(false);
        jtfSizeX.setHorizontalAlignment(JTextField.CENTER);

        jcbTileableX.setForeground(new Color(204, 0, 0));
        jcbTileableX.setText("X Tileable");
        jcbTileableX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTileableXActionPerformed(evt);
            }
        });

        jbLessSizeX.setText("<");
        jbLessSizeX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLessSizeXActionPerformed(evt);
            }
        });

        jbMoreSizeY.setText(">");
        jbMoreSizeY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoreSizeYActionPerformed(evt);
            }
        });

        jbLessSizeY.setText("<");
        jbLessSizeY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLessSizeYActionPerformed(evt);
            }
        });

        jcbGlobalTexMapping.setText("Global Texture Mapping");
        jcbGlobalTexMapping.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbGlobalTexMappingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfGlobalTexScale))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jtfXOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jbXOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfYOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbYOffset, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jbGlobalTexScale)
                                .addGap(18, 18, 18)
                                .addComponent(jcbGlobalTexMapping))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbLessSizeY))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbLessSizeX)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jtfSizeY, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbMoreSizeY)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbTileableY)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbVtileable))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jtfSizeX, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbMoreSizeX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbTileableX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbUtileable)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jbLessSizeX, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbMoreSizeX, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbTileableX)
                    .addComponent(jcbUtileable)
                    .addComponent(jtfSizeX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jbLessSizeY, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbMoreSizeY, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbTileableY)
                    .addComponent(jcbVtileable)
                    .addComponent(jtfSizeY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jtfXOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbXOffset)
                    .addComponent(jLabel15)
                    .addComponent(jtfYOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbYOffset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGlobalTexScale)
                    .addComponent(jcbGlobalTexMapping)
                    .addComponent(jtfGlobalTexScale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Tile 3D Model"));

        jLabel5.setText("Model name:");

        jtfObjName.setEditable(false);
        jtfObjName.setColumns(17);
        jtfObjName.setText(" ");
        jtfObjName.setEnabled(false);
        jtfObjName.setMaximumSize(new java.awt.Dimension(9, 20));

        jbExportTileAsObj.setIcon(new ImageIcon(getClass().getResource("/icons/ExportTileIcon.png"))); // NOI18N
        jbExportTileAsObj.setText("Export OBJ...");
        jbExportTileAsObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportTileAsObjActionPerformed(evt);
            }
        });

        jbImportTileAsObj.setIcon(new ImageIcon(getClass().getResource("/icons/ImportTileIcon.png"))); // NOI18N
        jbImportTileAsObj.setText("Replace OBJ...");
        jbImportTileAsObj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportTileAsObjActionPerformed(evt);
            }
        });

        jbEditVertexColors.setIcon(new ImageIcon(getClass().getResource("/icons/VertexColorEditorIcon.png"))); // NOI18N
        jbEditVertexColors.setText("Edit Vertex Colors...");
        jbEditVertexColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditVertexColorsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jbExportTileAsObj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbImportTileAsObj)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbEditVertexColors)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfObjName, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfObjName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbExportTileAsObj)
                    .addComponent(jbImportTileAsObj)
                    .addComponent(jbEditVertexColors))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Materials"));

        jLabel16.setText("Number of materials:");

        jtfNumTextures.setHorizontalAlignment(JTextField.CENTER);
        jtfNumTextures.setEnabled(false);

        jLabel4.setText("Material selected:");
        jLabel4.setToolTipText("");

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jcbMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMaterialActionPerformed(evt);
            }
        });

        textureDisplay.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0, 0, 0)));
        textureDisplay.setPreferredSize(new java.awt.Dimension(128, 128));

        javax.swing.GroupLayout textureDisplayLayout = new javax.swing.GroupLayout(textureDisplay);
        textureDisplay.setLayout(textureDisplayLayout);
        textureDisplayLayout.setHorizontalGroup(
            textureDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        textureDisplayLayout.setVerticalGroup(
            textureDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        jbAddTexture.setIcon(new ImageIcon(getClass().getResource("/icons/AddTileIcon.png"))); // NOI18N
        jbAddTexture.setText("Add texture...");
        jbAddTexture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddTextureActionPerformed(evt);
            }
        });

        jLabel22.setText("Material: ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcbMaterial, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jbAddTexture)
                        .addGap(16, 16, 16))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfNumTextures, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(textureDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textureDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(jtfNumTextures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel22)
                            .addComponent(jcbMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbAddTexture))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbAddTile.setIcon(new ImageIcon(getClass().getResource("/icons/AddTileIcon.png"))); // NOI18N
        jbAddTile.setText("Add Tiles...");
        jbAddTile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddTileActionPerformed(evt);
            }
        });

        jLabel23.setText("Move tile:");

        jbImportTiles.setIcon(new ImageIcon(getClass().getResource("/icons/ImportTileIcon.png"))); // NOI18N
        jbImportTiles.setText("Import Tiles...");
        jbImportTiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImportTilesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfIndexTile, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel23)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbMoveUp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbMoveDown))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jbAddTile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbRemoveTile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbDuplicateTile)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbImportTiles)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfIndexTile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jbMoveUp)
                    .addComponent(jbMoveDown)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbDuplicateTile)
                    .addComponent(jbRemoveTile)
                    .addComponent(jbAddTile)
                    .addComponent(jbImportTiles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tile Editor", jPanel1);
        jPanel1.getAccessibleContext().setAccessibleName("Tileset Editor");

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jlistINames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlistINames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlistINamesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlistINames);

        jtfPaletteName.setText(" ");
        jtfPaletteName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfPaletteNameActionPerformed(evt);
            }
        });

        jLabel6.setText("Palette Name:");

        jLabel7.setText("Texture Name:");

        jtfTextureName.setText(" ");
        jtfTextureName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfTextureNameActionPerformed(evt);
            }
        });

        jbTextName.setText("Apply");
        jbTextName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbTextNameActionPerformed(evt);
            }
        });

        jbPaletteName.setText("Apply");
        jbPaletteName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPaletteNameActionPerformed(evt);
            }
        });

        jcbEnableFog.setText("Enable Fog");
        jcbEnableFog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbEnableFogActionPerformed(evt);
            }
        });

        jcbRenderFrontAndBack.setText("Render Front and Back Face");
        jcbRenderFrontAndBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRenderFrontAndBackActionPerformed(evt);
            }
        });

        jcbUniformNormal.setText("Uniform Normal Orientation");
        jcbUniformNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbUniformNormalActionPerformed(evt);
            }
        });

        jLabel8.setText("Material Name:");

        jtfMaterialName.setText(" ");
        jtfMaterialName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfMaterialNameActionPerformed(evt);
            }
        });

        jbMaterialName.setText("Apply");
        jbMaterialName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMaterialNameActionPerformed(evt);
            }
        });

        jLabel9.setText("Alpha: ");

        jSpinner2.setModel(new SpinnerNumberModel(0, 0, 31, 1));
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        jLabel11.setText("Tex Gen Mode: ");

        jcbTexGenMode.setMaximumRowCount(4);
        jcbTexGenMode.setModel(new DefaultComboBoxModel<>(new String[] { "None", "Texture", "Normal", "Vertex" }));
        jcbTexGenMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTexGenModeActionPerformed(evt);
            }
        });

        textureDisplayMaterial.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(0, 0, 0)));
        textureDisplayMaterial.setPreferredSize(new java.awt.Dimension(128, 128));

        javax.swing.GroupLayout textureDisplayMaterialLayout = new javax.swing.GroupLayout(textureDisplayMaterial);
        textureDisplayMaterial.setLayout(textureDisplayMaterialLayout);
        textureDisplayMaterialLayout.setHorizontalGroup(
            textureDisplayMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );
        textureDisplayMaterialLayout.setVerticalGroup(
            textureDisplayMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        jcbAlwaysIncludedInImd.setText("Always included in IMD");
        jcbAlwaysIncludedInImd.setToolTipText("Used in HGSS");
        jcbAlwaysIncludedInImd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlwaysIncludedInImdActionPerformed(evt);
            }
        });

        jbMoveMaterialUp.setText("▲");
        jbMoveMaterialUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveMaterialUpActionPerformed(evt);
            }
        });

        jbMoveMaterialDown.setText("▼");
        jbMoveMaterialDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveMaterialDownActionPerformed(evt);
            }
        });

        jbReplaceMaterial.setIcon(new ImageIcon(getClass().getResource("/icons/RemoveTileIcon.png"))); // NOI18N
        jbReplaceMaterial.setText("Replace Material");
        jbReplaceMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReplaceMaterialActionPerformed(evt);
            }
        });

        jLabel17.setText("Tex Tiling U: ");

        jcbTexTilingU.setMaximumRowCount(4);
        jcbTexTilingU.setModel(new DefaultComboBoxModel<>(new String[] { "Repeat", "Clamp", "Flip" }));
        jcbTexTilingU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTexTilingUActionPerformed(evt);
            }
        });

        jLabel18.setText("Tex Tiling V: ");

        jcbTexTilingV.setMaximumRowCount(4);
        jcbTexTilingV.setModel(new DefaultComboBoxModel<>(new String[] { "Repeat", "Clamp", "Flip" }));
        jcbTexTilingV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTexTilingVActionPerformed(evt);
            }
        });

        jLabel19.setText("Color Format:");

        jcbColorFormat.setModel(new DefaultComboBoxModel<>(new String[] { "Palette 4", "Palette 16", "Palette 256", "A3I5", "A5I3" }));
        jcbColorFormat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbColorFormatActionPerformed(evt);
            }
        });

        jLabel20.setText("Lights: ");

        jcbL0.setText("L0");
        jcbL0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbL0ActionPerformed(evt);
            }
        });

        jcbL1.setText("L1");
        jcbL1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbL1ActionPerformed(evt);
            }
        });

        jcbL2.setText("L2");
        jcbL2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbL2ActionPerformed(evt);
            }
        });

        jcbL3.setText("L3");
        jcbL3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbL3ActionPerformed(evt);
            }
        });

        jbReplaceTexture.setIcon(new ImageIcon(getClass().getResource("/icons/ImportTileIcon.png"))); // NOI18N
        jbReplaceTexture.setText("Change Texture");
        jbReplaceTexture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReplaceTextureActionPerformed(evt);
            }
        });

        jcbRenderBorder.setText("Draw Outline Border");
        jcbRenderBorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRenderBorderActionPerformed(evt);
            }
        });

        jLabel21.setText("Material list:");

        jcbUseVertexColors.setText("Use Vertex Colors");
        jcbUseVertexColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbUseVertexColorsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jtfTextureName, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtfMaterialName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                    .addComponent(jtfPaletteName, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jbMoveMaterialUp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbMoveMaterialDown))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jbPaletteName, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jbTextName, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jbMaterialName, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jcbTexTilingU, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jcbTexGenMode, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jcbEnableFog)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jcbTexTilingV, 0, 89, Short.MAX_VALUE)
                                                .addComponent(jcbColorFormat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addComponent(jcbUniformNormal)
                                    .addComponent(jcbRenderFrontAndBack)
                                    .addComponent(jcbAlwaysIncludedInImd)
                                    .addComponent(jcbRenderBorder))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(textureDisplayMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jbReplaceTexture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbReplaceMaterial, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbL0)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbL1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbL2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbL3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbUseVertexColors)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfMaterialName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jbMaterialName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfTextureName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jbTextName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtfPaletteName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jbPaletteName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbMoveMaterialUp)
                            .addComponent(jbMoveMaterialDown))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(textureDisplayMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbReplaceTexture)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbReplaceMaterial))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jcbTexGenMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(jcbTexTilingU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(jcbTexTilingV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(jcbColorFormat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbEnableFog)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbUniformNormal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbRenderFrontAndBack)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcbAlwaysIncludedInImd)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbRenderBorder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(jcbL0)
                            .addComponent(jcbL1)
                            .addComponent(jcbL2)
                            .addComponent(jcbL3)
                            .addComponent(jcbUseVertexColors))
                        .addGap(0, 117, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Material Editor", jPanel3);

        jLabel12.setText("Rotate: ");

        jbRotateModel.setText("↺");
        jbRotateModel.setToolTipText("");
        jbRotateModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRotateModelActionPerformed(evt);
            }
        });

        jLabel13.setText("Flip : ");

        jbFlipModel.setText("⇆");
        jbFlipModel.setToolTipText("");
        jbFlipModel.setEnabled(false);
        jbFlipModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFlipModelActionPerformed(evt);
            }
        });

        jbMoveModelUp.setForeground(new Color(0, 153, 0));
        jbMoveModelUp.setText("▲");
        jbMoveModelUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveModelUpActionPerformed(evt);
            }
        });

        jbMoveModelDown.setForeground(new Color(0, 153, 0));
        jbMoveModelDown.setText("▼");
        jbMoveModelDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveModelDownActionPerformed(evt);
            }
        });

        jbMoveModelLeft.setForeground(new Color(204, 0, 0));
        jbMoveModelLeft.setText("◄");
        jbMoveModelLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveModelLeftActionPerformed(evt);
            }
        });

        jbMoveModelRight.setForeground(new Color(204, 0, 0));
        jbMoveModelRight.setText("►");
        jbMoveModelRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveModelRightActionPerformed(evt);
            }
        });

        jbMoveModelUp1.setForeground(new Color(0, 0, 255));
        jbMoveModelUp1.setText("▲");
        jbMoveModelUp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveModelUp1ActionPerformed(evt);
            }
        });

        jbMoveModelDown1.setForeground(new Color(0, 0, 255));
        jbMoveModelDown1.setText("▼");
        jbMoveModelDown1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveModelDown1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbFlipModel)
                    .addComponent(jbRotateModel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jbMoveModelLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbMoveModelDown)
                    .addComponent(jbMoveModelUp, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbMoveModelRight, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbMoveModelUp1)
                    .addComponent(jbMoveModelDown1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jbRotateModel)
                            .addComponent(jbMoveModelUp))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jbFlipModel)
                            .addComponent(jbMoveModelDown)))
                    .addComponent(jbMoveModelRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbMoveModelLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jbMoveModelUp1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbMoveModelDown1)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Model Editor", jPanel4);

        jcbBackfaceCulling.setSelected(true);
        jcbBackfaceCulling.setText("Backface Culling");
        jcbBackfaceCulling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbBackfaceCullingActionPerformed(evt);
            }
        });

        jcbWireframe.setSelected(true);
        jcbWireframe.setText("Wireframe");
        jcbWireframe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbWireframeActionPerformed(evt);
            }
        });

        jcbTexturesEnabled.setSelected(true);
        jcbTexturesEnabled.setText("Textures");
        jcbTexturesEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTexturesEnabledActionPerformed(evt);
            }
        });

        jcbShadingEnabled.setText("Shading");
        jcbShadingEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbShadingEnabledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbBackfaceCulling)
                    .addComponent(jcbWireframe))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbShadingEnabled)
                    .addComponent(jcbTexturesEnabled))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbBackfaceCulling)
                    .addComponent(jcbTexturesEnabled))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbWireframe)
                    .addComponent(jcbShadingEnabled))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Display Settings", jPanel8);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Smart Drawing"));

        jScrollPaneSmartGrid.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPaneSmartGrid.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout smartGridDisplayLayout = new javax.swing.GroupLayout(smartGridDisplay);
        smartGridDisplay.setLayout(smartGridDisplayLayout);
        smartGridDisplayLayout.setHorizontalGroup(
            smartGridDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );
        smartGridDisplayLayout.setVerticalGroup(
            smartGridDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 459, Short.MAX_VALUE)
        );

        jScrollPaneSmartGrid.setViewportView(smartGridDisplay);

        jbMoveSPaintUp.setText("▲");
        jbMoveSPaintUp.setFocusable(false);
        jbMoveSPaintUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveSPaintUpActionPerformed(evt);
            }
        });

        jbMoveSPaintDown.setText("▼");
        jbMoveSPaintDown.setFocusable(false);
        jbMoveSPaintDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMoveSPaintDownActionPerformed(evt);
            }
        });

        jbAddSmartGrid.setText("+");
        jbAddSmartGrid.setFocusable(false);
        jbAddSmartGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddSmartGridActionPerformed(evt);
            }
        });

        jbRemoveSmartGrid.setText("-");
        jbRemoveSmartGrid.setFocusable(false);
        jbRemoveSmartGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoveSmartGridActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPaneSmartGrid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbMoveSPaintUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbAddSmartGrid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbMoveSPaintDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbRemoveSmartGrid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPaneSmartGrid)
                .addGap(9, 9, 9)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAddSmartGrid)
                    .addComponent(jbRemoveSmartGrid))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbMoveSPaintUp)
                    .addComponent(jbMoveSPaintDown)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(tileDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tileDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tileSelectorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tileSelectorMousePressed
        tileDisplay.repaint();
        updateView();
    }//GEN-LAST:event_tileSelectorMousePressed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        if (handler.getTileset().size() > 0) {
            tileHandler.setTextureIdIndexSelected((Integer) jSpinner1.getValue());

            System.out.println((Integer) jSpinner1.getValue());
            System.out.println(tileHandler.getTextureIdIndexSelected());

            jComboBoxListenerActive = false;
            jcbMaterial.setSelectedItem(tileHandler.getTextureSelectedName());
            jComboBoxListenerActive = true;

            updateViewTexture();
        }
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jcbMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMaterialActionPerformed
        if (handler.getTileset().size() > 0) {
            if (jComboBoxListenerActive) {

                handler.getTileSelected().getTextureIDs().set(
                        tileHandler.getTextureIdIndexSelected(),
                        jcbMaterial.getSelectedIndex());

                updateSelectedTileThumbnail();
                /*
                TilesetRenderer tr = new TilesetRenderer(handler.getTileset());
                for (int i = 0; i < handler.getTileset().size(); i++) {
                tr.renderTileThumbnail(i);
                }*/

                //tileHandler.updateTileThumbnail(handler.getTileIndexSelected()); //PROBLEMATIC
                tileSelector.updateTile(handler.getTileIndexSelected());

                updateViewTexture();
            }
        }
    }//GEN-LAST:event_jcbMaterialActionPerformed

    private void jbLessSizeXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLessSizeXActionPerformed
        if (handler.getTileset().size() > 0) {
            int value = Integer.parseInt(jtfSizeX.getText());
            value--;
            if (value >= 1) {
                jtfSizeX.setText(String.valueOf(value));
                handler.getTileSelected().setWidth(value);
                updateSelectedTileThumbnail();
                tileSelector.updateLayout();
                tileSelector.repaint();
            }
        }
    }//GEN-LAST:event_jbLessSizeXActionPerformed

    private void jbMoreSizeXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoreSizeXActionPerformed
        if (handler.getTileset().size() > 0) {
            int value = Integer.parseInt(jtfSizeX.getText());
            value++;
            if (value <= Tile.maxTileSize) {
                jtfSizeX.setText(String.valueOf(value));
                handler.getTileSelected().setWidth(value);
                updateSelectedTileThumbnail();
                tileSelector.updateLayout();
                tileSelector.repaint();
            }
        }
    }//GEN-LAST:event_jbMoreSizeXActionPerformed

    private void jbLessSizeYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLessSizeYActionPerformed
        if (handler.getTileset().size() > 0) {
            int value = Integer.parseInt(jtfSizeY.getText());
            value--;
            if (value >= 1) {
                jtfSizeY.setText(String.valueOf(value));
                handler.getTileSelected().setHeight(value);
                updateSelectedTileThumbnail();
                tileSelector.updateLayout();
                tileSelector.repaint();
            }
        }
    }//GEN-LAST:event_jbLessSizeYActionPerformed

    private void jbMoreSizeYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoreSizeYActionPerformed
        if (handler.getTileset().size() > 0) {
            int value = Integer.parseInt(jtfSizeY.getText());
            value++;
            if (value <= Tile.maxTileSize) {
                jtfSizeY.setText(String.valueOf(value));
                handler.getTileSelected().setHeight(value);
                updateSelectedTileThumbnail();
                tileSelector.updateLayout();
                tileSelector.repaint();
            }
        }
    }//GEN-LAST:event_jbMoreSizeYActionPerformed

    private void jbRemoveTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveTileActionPerformed
        if (handler.getTileset().size() > 1) {

            ArrayList<Integer> indices = tileSelector.getIndicesSelected();
            for (int i = 0; i < indices.size(); i++) {
                handler.getTileset().removeTile(indices.get(0));
            }

            int index = handler.getTileIndexSelected();
            if (index >= handler.getTileset().size()) {
                handler.setIndexTileSelected(handler.getTileset().size() - 1);
                tileHandler.setMaterialIndexSelected(0);
            }

            tileSelector.setIndexSecondTileSelected(-1);

            //tileHandler.updateTilesetRenderer();
            tileSelector.updateLayout();
            tileDisplay.requestUpdate();

            updateJComboBox();

            updateView();
            updateViewTexture();
        } else {
            JOptionPane.showMessageDialog(this, "The tileset needs at least 1 tile", "Can't delete tile", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jbRemoveTileActionPerformed

    private void jbAddTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddTileActionPerformed
        final AddTileDialog addTileDialog = new AddTileDialog(handler.getMainFrame(),
                true, "Import Tile Settings");
        addTileDialog.setLocationRelativeTo(this);
        addTileDialog.setVisible(true);
        if (addTileDialog.getReturnValue() == AddTileDialog.APPROVE_OPTION) {
            float scale = addTileDialog.getScale();
            boolean flip = addTileDialog.flip();

            final JFileChooser fc = new JFileChooser();
            if (handler.getLastTilesetDirectoryUsed() != null) {
                fc.setCurrentDirectory(new File(handler.getLastTilesetDirectoryUsed()));
            }
            fc.setFileFilter(new FileNameExtensionFilter("OBJ (*.obj)", "obj"));
            fc.setMultiSelectionEnabled(true);
            fc.setApproveButtonText("Open");
            fc.setDialogTitle("Open");
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    handler.setLastTilesetDirectoryUsed(fc.getSelectedFile().getParent());
                    File[] files = fc.getSelectedFiles();
                    ArrayList<Tile> newTiles = new ArrayList<>();
                    boolean exceptionFound = false;
                    for (int i = 0; i < files.length; i++) {
                        File file = files[i];
                        try {
                            Tile tile = new Tile(handler.getTileset(), file.getAbsolutePath());

                            if (scale != 1.0f) {
                                tile.scaleModel(scale);
                            }

                            if (flip) {
                                tile.flipModelYZ();
                            }

                            newTiles.add(tile);
                        } catch (TextureNotFoundException ex) {
                            exceptionFound = true;
                            JOptionPane.showMessageDialog(this, ex.getMessage(),
                                    "Error reading texture",
                                    JOptionPane.ERROR_MESSAGE);
                        } catch (NormalsNotFoundException ex) {
                            exceptionFound = true;
                            JOptionPane.showMessageDialog(this, ex.getMessage(),
                                    "Error reading normals",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    }

                    if (exceptionFound) {
                        BufferedImage image = Utils.loadTexImageAsResource("/imgs/BlenderExportObjSettings.png");
                        JLabel picLabel = new JLabel(new ImageIcon(image));
                        JOptionPane.showMessageDialog(null, picLabel,
                                "Use the following Blender export settings",
                                JOptionPane.PLAIN_MESSAGE, null);
                    }

                    int start = handler.getTileset().getTiles().size();
                    handler.getTileset().getTiles().addAll(newTiles);

                    //New code
                    handler.getTileset().removeUnusedTextures();

                    updateTileThumbnails(start, handler.getTileset().size());

                    tileSelector.updateLayout();
                    tileDisplay.requestUpdate();

                    tileDisplay.repaint();

                    updateJComboBox();
                    updateView();
                    repaint();

                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Can't open file", "Error opening some files", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jbAddTileActionPerformed

    private void jcbTileableXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTileableXActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().setXtileable(jcbTileableX.isSelected());
        }
    }//GEN-LAST:event_jcbTileableXActionPerformed

    private void jcbTileableYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTileableYActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().setYtileable(jcbTileableY.isSelected());
        }
    }//GEN-LAST:event_jcbTileableYActionPerformed

    private void jbMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveUpActionPerformed
        if (handler.getTileset().size() > 0) {
            if (handler.getTileIndexSelected() > 0) {
                int newIndex = handler.getTileIndexSelected() - 1;
                handler.getTileset().swapTiles(handler.getTileIndexSelected(), newIndex);
                handler.setIndexTileSelected(newIndex);
                tileSelector.updateLayout();
                tileSelector.repaint();
                updateViewTileIndex();
            }
        }
    }//GEN-LAST:event_jbMoveUpActionPerformed

    private void jbMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveDownActionPerformed
        if (handler.getTileset().size() > 0) {
            if (handler.getTileIndexSelected() < handler.getTileset().size() - 1) {
                int newIndex = handler.getTileIndexSelected() + 1;
                handler.getTileset().swapTiles(handler.getTileIndexSelected(), newIndex);
                handler.setIndexTileSelected(newIndex);
                tileSelector.updateLayout();
                tileSelector.repaint();
                updateViewTileIndex();
            }
        }
    }//GEN-LAST:event_jbMoveDownActionPerformed

    private void jbAddTextureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddTextureActionPerformed
        if (handler.getTileset().size() > 0) {
            final ThumbnailFileChooser fc = new ThumbnailFileChooser(); //Check for a better alternative
            if (handler.getLastTilesetDirectoryUsed() != null) {
                fc.setCurrentDirectory(new File(handler.getLastTilesetDirectoryUsed()));
            }
            fc.setFileFilter(new FileNameExtensionFilter("Portable Network Graphics (*.PNG)", "png"));
            fc.setApproveButtonText("Open");
            fc.setDialogTitle("Open");
            int returnVal = fc.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = fc.getSelectedFile();
                    handler.setLastTilesetDirectoryUsed(fc.getSelectedFile().getParent());

                    String path = file.getAbsolutePath();
                    boolean textureAdded = handler.getTileset().addTexture(path);
                    if (textureAdded) {
                        handler.getTileSelected().getTextureIDs().set(
                                tileHandler.getTextureIdIndexSelected(),
                                handler.getTileset().getMaterials().size() - 1);
                        updateJComboBox();
                        updateViewTextNames();
                        jComboBoxListenerActive = false;
                        jcbMaterial.setSelectedItem(tileHandler.getTextureSelectedName());
                        jComboBoxListenerActive = true;
                        tileDisplay.requestUpdate();
                        tileDisplay.repaint();
                        updateSelectedTileThumbnail();
                        //tileHandler.updateTileThumbnail(handler.getTileIndexSelected());
                        tileSelector.updateTile(handler.getTileIndexSelected());
                        tileSelector.repaint();
                        textureDisplay.repaint();
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "A texture with the same name is already in the tileset",
                                "Texture already loaded", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Can't open file", "Error opening the file", JOptionPane.INFORMATION_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_jbAddTextureActionPerformed

    private void jlistINamesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlistINamesValueChanged
        if (handler.getTileset().size() > 0) {
            int index = jlistINames.getSelectedIndex();
            if (index != -1) {
                tileHandler.setMaterialIndexSelected(jlistINames.getSelectedIndex());
            }

            updateViewMaterialProperties();
            textureDisplayMaterial.repaint();
        }
    }//GEN-LAST:event_jlistINamesValueChanged

    private void jbTextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbTextNameActionPerformed
        if (handler.getTileset().size() > 0) {
            changeTextureNameImd();
        }
    }//GEN-LAST:event_jbTextNameActionPerformed

    private void jbPaletteNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPaletteNameActionPerformed
        if (handler.getTileset().size() > 0) {
            changePaletteNameImd();
        }
    }//GEN-LAST:event_jbPaletteNameActionPerformed

    private void jcbGlobalTexMappingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbGlobalTexMappingActionPerformed
        if (handler.getTileset().size() > 0) {
            boolean selected = jcbGlobalTexMapping.isSelected();
            handler.getTileSelected().setGlobalTextureMapping(selected);
            jtfGlobalTexScale.setEditable(selected);
            jbGlobalTexScale.setEnabled(selected);
            jtfGlobalTexScale.setBackground(selected ? Color.white : Color.lightGray);
        }
    }//GEN-LAST:event_jcbGlobalTexMappingActionPerformed

    private void jbRotateModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRotateModelActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().rotateModelZ();

            updateView3DModel();
        }
    }//GEN-LAST:event_jbRotateModelActionPerformed

    private void jcbEnableFogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbEnableFogActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setFogEnabled(jcbEnableFog.isSelected());
        }
    }//GEN-LAST:event_jcbEnableFogActionPerformed

    private void jcbRenderFrontAndBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRenderFrontAndBackActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setRenderBothFaces(jcbRenderFrontAndBack.isSelected());
        }
    }//GEN-LAST:event_jcbRenderFrontAndBackActionPerformed

    private void jcbUniformNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbUniformNormalActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setUniformNormalOrientation(jcbUniformNormal.isSelected());
        }
    }//GEN-LAST:event_jcbUniformNormalActionPerformed

    private void jbMaterialNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMaterialNameActionPerformed
        if (handler.getTileset().size() > 0) {
            changeMaterialName();
        }
    }//GEN-LAST:event_jbMaterialNameActionPerformed

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        if (handler.getTileset().size() > 0) {
            if (jsAlphaActive) {
                int alpha = (Integer) jSpinner2.getValue();
                if (alpha >= 0 && alpha < 32) {
                    tileHandler.getMaterialSelected().setAlpha(alpha);
                }
            }
        }
    }//GEN-LAST:event_jSpinner2StateChanged

    private void jbGlobalTexScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGlobalTexScaleActionPerformed
        if (handler.getTileset().size() > 0) {
            changeGlobalTexScale();
        }
    }//GEN-LAST:event_jbGlobalTexScaleActionPerformed

    private void jcbTexGenModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTexGenModeActionPerformed
        if (handler.getTileset().size() > 0) {
            if (jcbTexGenModeListenerActive) {
                tileHandler.getMaterialSelected().setTexGenMode(jcbTexGenMode.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_jcbTexGenModeActionPerformed

    private void jbDuplicateTileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDuplicateTileActionPerformed
        if (handler.getTileset().size() > 0) {
            ArrayList<Integer> indices = tileSelector.getIndicesSelected();

            handler.getTileset().duplicateTiles(indices);
            //int index = handler.getTileIndexSelected();
            //handler.getTileset().duplicateTile(index);
            tileDisplay.requestUpdate();
            //tileDisplay.swapVBOs(handler.getTileIndexSelected(), newIndex);
            //handler.setIndexTileSelected(indices.get(indices.get(0)));
            tileSelector.updateLayout();
            tileSelector.repaint();
            updateViewTileIndex();
        }

    }//GEN-LAST:event_jbDuplicateTileActionPerformed

    private void jbFlipModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFlipModelActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().flipModelX();
            updateView3DModel();
        }
    }//GEN-LAST:event_jbFlipModelActionPerformed

    private void jbMoveModelUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveModelUpActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().moveModel(0.0f, 1.0f, 0.0f);
            updateView3DModel();
        }
    }//GEN-LAST:event_jbMoveModelUpActionPerformed

    private void jbMoveModelDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveModelDownActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().moveModel(0.0f, -1.0f, 0.0f);
            updateView3DModel();
        }
    }//GEN-LAST:event_jbMoveModelDownActionPerformed

    private void jbMoveModelLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveModelLeftActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().moveModel(-1.0f, 0.0f, 0.0f);
            updateView3DModel();
        }
    }//GEN-LAST:event_jbMoveModelLeftActionPerformed

    private void jbMoveModelRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveModelRightActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().moveModel(1.0f, 0.0f, 0.0f);
            updateView3DModel();
        }
    }//GEN-LAST:event_jbMoveModelRightActionPerformed

    private void jbMoveMaterialUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveMaterialUpActionPerformed
        if (handler.getTileset().size() > 0) {
            int index = tileHandler.getMaterialIndexSelected();
            if (index > 0) {
                handler.getTileset().swapMaterials(index, index - 1);
                tileDisplay.swapTextures(index, index - 1);
                updateJComboBox();
                updateViewTextNames();
                jlistINames.setSelectedIndex(index - 1);
            }
        }
    }//GEN-LAST:event_jbMoveMaterialUpActionPerformed

    private void jbMoveMaterialDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveMaterialDownActionPerformed
        if (handler.getTileset().size() > 0) {
            int index = tileHandler.getMaterialIndexSelected();
            if (index < handler.getTileset().getMaterials().size() - 1) {
                handler.getTileset().swapMaterials(index, index + 1);
                tileDisplay.swapTextures(index, index + 1);
                updateJComboBox();
                updateViewTextNames();
                jlistINames.setSelectedIndex(index + 1);
            }
        }

    }//GEN-LAST:event_jbMoveMaterialDownActionPerformed

    private void jtfMaterialNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfMaterialNameActionPerformed
        if (handler.getTileset().size() > 0) {
            changeMaterialName();
        }
    }//GEN-LAST:event_jtfMaterialNameActionPerformed

    private void jtfTextureNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfTextureNameActionPerformed
        if (handler.getTileset().size() > 0) {
            changeTextureNameImd();
        }
    }//GEN-LAST:event_jtfTextureNameActionPerformed

    private void jtfPaletteNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfPaletteNameActionPerformed
        if (handler.getTileset().size() > 0) {
            changePaletteNameImd();
        }
    }//GEN-LAST:event_jtfPaletteNameActionPerformed

    private void jcbAlwaysIncludedInImdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlwaysIncludedInImdActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setAlwaysIncludeInImd(jcbAlwaysIncludedInImd.isSelected());
        }
    }//GEN-LAST:event_jcbAlwaysIncludedInImdActionPerformed

    private void jcbUtileableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbUtileableActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().setUtileable(jcbUtileable.isSelected());
        }
    }//GEN-LAST:event_jcbUtileableActionPerformed

    private void jcbVtileableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbVtileableActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().setVtileable(jcbVtileable.isSelected());
        }
    }//GEN-LAST:event_jcbVtileableActionPerformed

    private void jbXOffsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbXOffsetActionPerformed
        if (handler.getTileset().size() > 0) {
            changeXOffset();
        }
    }//GEN-LAST:event_jbXOffsetActionPerformed

    private void jbYOffsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbYOffsetActionPerformed
        if (handler.getTileset().size() > 0) {
            changeYOffset();
        }
    }//GEN-LAST:event_jbYOffsetActionPerformed

    private void jbReplaceMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReplaceMaterialActionPerformed
        if (handler.getTileset().size() > 0) {
            replaceMaterial();
        }
    }//GEN-LAST:event_jbReplaceMaterialActionPerformed

    private void jbMoveModelUp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveModelUp1ActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().moveModel(0.0f, 0.0f, 1.0f);
            updateView3DModel();
        }
    }//GEN-LAST:event_jbMoveModelUp1ActionPerformed

    private void jbMoveModelDown1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveModelDown1ActionPerformed
        if (handler.getTileset().size() > 0) {
            handler.getTileSelected().moveModel(0.0f, 0.0f, -1.0f);
            updateView3DModel();
        }
    }//GEN-LAST:event_jbMoveModelDown1ActionPerformed

    private void jcbTexTilingUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTexTilingUActionPerformed
        if (handler.getTileset().size() > 0) {
            if (jcbTexTilingUListenerActive) {
                tileHandler.getMaterialSelected().setTexTilingU(jcbTexTilingU.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_jcbTexTilingUActionPerformed

    private void jcbTexTilingVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTexTilingVActionPerformed
        if (handler.getTileset().size() > 0) {
            if (jcbTexTilingVListenerActive) {
                tileHandler.getMaterialSelected().setTexTilingV(jcbTexTilingV.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_jcbTexTilingVActionPerformed

    private void jcbColorFormatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbColorFormatActionPerformed
        if (handler.getTileset().size() > 0) {
            if (jcbColorFormatListenerActive) {
                tileHandler.getMaterialSelected().setColorFormat(jcbColorFormat.getSelectedIndex());
            }
        }
    }//GEN-LAST:event_jcbColorFormatActionPerformed

    private void jcbL0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbL0ActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setLight0(jcbL0.isSelected());
        }
    }//GEN-LAST:event_jcbL0ActionPerformed

    private void jcbL1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbL1ActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setLight1(jcbL1.isSelected());
        }
    }//GEN-LAST:event_jcbL1ActionPerformed

    private void jcbL2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbL2ActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setLight2(jcbL2.isSelected());
        }
    }//GEN-LAST:event_jcbL2ActionPerformed

    private void jcbL3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbL3ActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setLight3(jcbL3.isSelected());
        }
    }//GEN-LAST:event_jcbL3ActionPerformed

    private void jbExportTileAsObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportTileAsObjActionPerformed
        if (handler.getTileset().size() > 0) {
            final ExportTileDialog exportTileDialog = new ExportTileDialog(handler.getMainFrame(), true, "Export Tile Settings");
            exportTileDialog.setLocationRelativeTo(this);
            exportTileDialog.setVisible(true);
            if (exportTileDialog.getReturnValue() == AddTileDialog.APPROVE_OPTION) {
                float scale = exportTileDialog.getScale();
                boolean flip = exportTileDialog.flip();
                boolean includeVertexColors = exportTileDialog.includeVertexColors();

                final JFileChooser fc = new JFileChooser();
                if (handler.getLastTileObjDirectoryUsed() != null) {
                    fc.setCurrentDirectory(new File(handler.getLastTileObjDirectoryUsed()));
                }
                fc.setFileFilter(new FileNameExtensionFilter("OBJ (*.obj)", "obj"));
                fc.setApproveButtonText("Save");
                fc.setDialogTitle("Save tile as OBJ");
                fc.setSelectedFile(new File(handler.getTileSelected().getObjFilename()));
                int returnVal = fc.showOpenDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    String path = fc.getSelectedFile().getPath();
                    handler.setLastTileObjDirectoryUsed(fc.getSelectedFile().getParent());

                    ObjWriter objWriter = new ObjWriter(handler.getTileset(),
                            handler.getGrid(), path, handler.getGameIndex(), true, includeVertexColors);
                    try {
                        objWriter.writeTileObj(handler.getTileIndexSelected(), scale, flip);
                        JOptionPane.showMessageDialog(this, "Tile succesfully exported as OBJ",
                                "Tile saved", JOptionPane.INFORMATION_MESSAGE);
                    } catch (FileNotFoundException ex) {
                        JOptionPane.showMessageDialog(this, "There was a problem saving the tile as OBJ",
                                "Can't save tile", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_jbExportTileAsObjActionPerformed

    private void jbReplaceTextureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReplaceTextureActionPerformed
        if (handler.getTileset().size() > 0) {
            replaceTextureWithDialog();
        }
    }//GEN-LAST:event_jbReplaceTextureActionPerformed

    private void jbImportTileAsObjActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportTileAsObjActionPerformed
        if (handler.getTileset().size() > 0) {
            final AddTileDialog addTileDialog = new AddTileDialog(handler.getMainFrame(),
                    true, "Import Tile Settings");
            addTileDialog.setLocationRelativeTo(this);
            addTileDialog.setVisible(true);
            if (addTileDialog.getReturnValue() == AddTileDialog.APPROVE_OPTION) {
                float scale = addTileDialog.getScale();
                boolean flip = addTileDialog.flip();

                final JFileChooser fc = new JFileChooser();
                if (handler.getLastTilesetDirectoryUsed() != null) {
                    fc.setCurrentDirectory(new File(handler.getLastTilesetDirectoryUsed()));
                }
                fc.setFileFilter(new FileNameExtensionFilter("OBJ (*.obj)", "obj"));
                fc.setApproveButtonText("Open");
                fc.setDialogTitle("Open OBJ");
                int returnVal = fc.showOpenDialog(this);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    try {
                        handler.setLastTilesetDirectoryUsed(fc.getSelectedFile().getParent());
                        File file = fc.getSelectedFile();
                        boolean exceptionFound = false;
                        try {
                            Tile tile = new Tile(handler.getTileset(),
                                    file.getAbsolutePath(),
                                    handler.getTileSelected());

                            if (scale != 1.0f) {
                                tile.scaleModel(scale);
                            }

                            if (flip) {
                                tile.flipModelYZ();
                            }

                            handler.getTileset().getTiles().set(handler.getTileIndexSelected(), tile);

                            //Remove unused textures
                            handler.getTileset().removeUnusedTextures();

                            updateSelectedTileThumbnail();

                            tileSelector.updateLayout();
                            tileDisplay.requestUpdate();

                            tileDisplay.repaint();

                            updateJComboBox();
                            updateView();
                            repaint();

                        } catch (TextureNotFoundException ex) {
                            exceptionFound = true;
                            JOptionPane.showMessageDialog(this, ex.getMessage(),
                                    "Error reading texture",
                                    JOptionPane.ERROR_MESSAGE);
                        } catch (NormalsNotFoundException ex) {
                            exceptionFound = true;
                            JOptionPane.showMessageDialog(this, ex.getMessage(),
                                    "Error reading normals",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                        if (exceptionFound) {
                            BufferedImage image = Utils.loadTexImageAsResource("/imgs/BlenderExportObjSettings.png");
                            JLabel picLabel = new JLabel(new ImageIcon(image));
                            JOptionPane.showMessageDialog(null, picLabel,
                                    "Use the following Blender export settings",
                                    JOptionPane.PLAIN_MESSAGE, null);
                        }
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(this, "Can't open file", "Error opening some files", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_jbImportTileAsObjActionPerformed

    private void jcbRenderBorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRenderBorderActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setRenderBorder(jcbRenderBorder.isSelected());
        }
    }//GEN-LAST:event_jcbRenderBorderActionPerformed

    private void jbImportTilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImportTilesActionPerformed
        final JFileChooser fc = new JFileChooser();
        if (handler.getLastTilesetDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastTilesetDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("Pokemon DS Tileset (*.pdsts)", Tileset.fileExtension));
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Select a Pokemon DS Map Studio Tileset");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                handler.setLastTilesetDirectoryUsed(fc.getSelectedFile().getParent());
                String path = fc.getSelectedFile().getPath();
                Tileset tileset = TilesetIO.readTilesetFromFile(path);
                int start = handler.getTileset().size();

                final ImportTilesDialog dialog = new ImportTilesDialog(handler.getMainFrame(), true);
                dialog.init(tileset);
                dialog.setLocationRelativeTo(this);
                dialog.setVisible(true);

                if (dialog.getReturnValue() == ImportTilesDialog.APPROVE_OPTION) {
                    ArrayList<Tile> tiles = dialog.getTilesSelected();

                    handler.getTileset().importTiles(tiles);

                    handler.getTileset().removeUnusedTextures();

                    updateTileThumbnails(start, handler.getTileset().size());

                    tileSelector.updateLayout();
                    tileDisplay.requestUpdate();
                    tileDisplay.repaint();
                    updateJComboBox();
                    updateView();
                    repaint();
                }
            } catch (NullPointerException | TextureNotFoundException | IOException ex) {
                JOptionPane.showMessageDialog(this, "There was a problem opening the tileset",
                        "Error opening tileset", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_jbImportTilesActionPerformed

    private void jcbBackfaceCullingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbBackfaceCullingActionPerformed
        tileDisplay.setBackfaceCulling(jcbBackfaceCulling.isSelected());
        tileDisplay.repaint();
    }//GEN-LAST:event_jcbBackfaceCullingActionPerformed

    private void jcbWireframeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbWireframeActionPerformed
        tileDisplay.setWireframe(jcbWireframe.isSelected());
        tileDisplay.repaint();
    }//GEN-LAST:event_jcbWireframeActionPerformed

    private void jbEditVertexColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditVertexColorsActionPerformed
        if (handler.getTileset().size() > 0) {
            final VColorEditorDialog dialog = new VColorEditorDialog(handler.getMainFrame(), true);
            dialog.init(handler, tileHandler);
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            handler.getTileSelected().updateObjData();

            updateView3DModel();
        }

    }//GEN-LAST:event_jbEditVertexColorsActionPerformed

    private void jcbUseVertexColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbUseVertexColorsActionPerformed
        if (handler.getTileset().size() > 0) {
            tileHandler.getMaterialSelected().setVertexColorsEnabled(jcbUseVertexColors.isSelected());
        }
    }//GEN-LAST:event_jcbUseVertexColorsActionPerformed

    private void jcbTexturesEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTexturesEnabledActionPerformed
        tileDisplay.setTexturesEnabled(jcbTexturesEnabled.isSelected());
        tileDisplay.repaint();
    }//GEN-LAST:event_jcbTexturesEnabledActionPerformed

    private void jcbShadingEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbShadingEnabledActionPerformed
        tileDisplay.setLightingEnabled(jcbShadingEnabled.isSelected());
        tileDisplay.repaint();
    }//GEN-LAST:event_jcbShadingEnabledActionPerformed

    private void jbMoveSPaintUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveSPaintUpActionPerformed
        handler.moveSelectedSmartGridUp();
        smartGridDisplay.repaint();
    }//GEN-LAST:event_jbMoveSPaintUpActionPerformed

    private void jbMoveSPaintDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMoveSPaintDownActionPerformed
        handler.moveSelectedSmartGridDown();
        smartGridDisplay.repaint();
    }//GEN-LAST:event_jbMoveSPaintDownActionPerformed

    private void jbAddSmartGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddSmartGridActionPerformed
        if (handler.getTileset().size() > 0) {
            int gridIndex = handler.getSmartGridIndexSelected();
            try {
                handler.getSmartGridArray().add(gridIndex, new SmartGrid());
            } catch (IndexOutOfBoundsException ex) {
                handler.getSmartGridArray().add(new SmartGrid());
            }
            smartGridDisplay.updateSize();
            smartGridDisplay.repaint();
        }
    }//GEN-LAST:event_jbAddSmartGridActionPerformed

    private void jbRemoveSmartGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoveSmartGridActionPerformed
        if (handler.getTileset().size() > 0 && handler.getSmartGridArray().size() > 1) {
            int gridIndex = handler.getSmartGridIndexSelected();
            if (gridIndex >= 0 && gridIndex < handler.getSmartGridArray().size()) {
                handler.getSmartGridArray().remove(gridIndex);
                handler.setSmartGridIndexSelected(Math.max(0, gridIndex - 1));
                smartGridDisplay.updateSize();
                smartGridDisplay.repaint();
            }
        }
    }//GEN-LAST:event_jbRemoveSmartGridActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel13;
    private JLabel jLabel14;
    private JLabel jLabel15;
    private JLabel jLabel16;
    private JLabel jLabel17;
    private JLabel jLabel18;
    private JLabel jLabel19;
    private JLabel jLabel2;
    private JLabel jLabel20;
    private JLabel jLabel21;
    private JLabel jLabel22;
    private JLabel jLabel23;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneSmartGrid;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JButton jbAddSmartGrid;
    private javax.swing.JButton jbAddTexture;
    private javax.swing.JButton jbAddTile;
    private javax.swing.JButton jbDuplicateTile;
    private javax.swing.JButton jbEditVertexColors;
    private javax.swing.JButton jbExportTileAsObj;
    private javax.swing.JButton jbFlipModel;
    private javax.swing.JButton jbGlobalTexScale;
    private javax.swing.JButton jbImportTileAsObj;
    private javax.swing.JButton jbImportTiles;
    private javax.swing.JButton jbLessSizeX;
    private javax.swing.JButton jbLessSizeY;
    private javax.swing.JButton jbMaterialName;
    private javax.swing.JButton jbMoreSizeX;
    private javax.swing.JButton jbMoreSizeY;
    private javax.swing.JButton jbMoveDown;
    private javax.swing.JButton jbMoveMaterialDown;
    private javax.swing.JButton jbMoveMaterialUp;
    private javax.swing.JButton jbMoveModelDown;
    private javax.swing.JButton jbMoveModelDown1;
    private javax.swing.JButton jbMoveModelLeft;
    private javax.swing.JButton jbMoveModelRight;
    private javax.swing.JButton jbMoveModelUp;
    private javax.swing.JButton jbMoveModelUp1;
    private javax.swing.JButton jbMoveSPaintDown;
    private javax.swing.JButton jbMoveSPaintUp;
    private javax.swing.JButton jbMoveUp;
    private javax.swing.JButton jbPaletteName;
    private javax.swing.JButton jbRemoveSmartGrid;
    private javax.swing.JButton jbRemoveTile;
    private javax.swing.JButton jbReplaceMaterial;
    private javax.swing.JButton jbReplaceTexture;
    private javax.swing.JButton jbRotateModel;
    private javax.swing.JButton jbTextName;
    private javax.swing.JButton jbXOffset;
    private javax.swing.JButton jbYOffset;
    private javax.swing.JCheckBox jcbAlwaysIncludedInImd;
    private javax.swing.JCheckBox jcbBackfaceCulling;
    private javax.swing.JComboBox<String> jcbColorFormat;
    private javax.swing.JCheckBox jcbEnableFog;
    private javax.swing.JCheckBox jcbGlobalTexMapping;
    private javax.swing.JCheckBox jcbL0;
    private javax.swing.JCheckBox jcbL1;
    private javax.swing.JCheckBox jcbL2;
    private javax.swing.JCheckBox jcbL3;
    private javax.swing.JComboBox<String> jcbMaterial;
    private javax.swing.JCheckBox jcbRenderBorder;
    private javax.swing.JCheckBox jcbRenderFrontAndBack;
    private javax.swing.JCheckBox jcbShadingEnabled;
    private javax.swing.JComboBox<String> jcbTexGenMode;
    private javax.swing.JComboBox<String> jcbTexTilingU;
    private javax.swing.JComboBox<String> jcbTexTilingV;
    private javax.swing.JCheckBox jcbTexturesEnabled;
    private javax.swing.JCheckBox jcbTileableX;
    private javax.swing.JCheckBox jcbTileableY;
    private javax.swing.JCheckBox jcbUniformNormal;
    private javax.swing.JCheckBox jcbUseVertexColors;
    private javax.swing.JCheckBox jcbUtileable;
    private javax.swing.JCheckBox jcbVtileable;
    private javax.swing.JCheckBox jcbWireframe;
    private JList<String> jlistINames;
    private JTextField jtfGlobalTexScale;
    private JTextField jtfIndexTile;
    private JTextField jtfMaterialName;
    private JTextField jtfNumTextures;
    private JTextField jtfObjName;
    private JTextField jtfPaletteName;
    private JTextField jtfSizeX;
    private JTextField jtfSizeY;
    private JTextField jtfTextureName;
    private JTextField jtfXOffset;
    private JTextField jtfYOffset;
    private editor.smartdrawing.SmartGridDisplay smartGridDisplay;
    private TextureDisplay textureDisplay;
    private TextureDisplayMaterial textureDisplayMaterial;
    private TileDisplay tileDisplay;
    private editor.tileselector.TileSelector tileSelector;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler) {
        this.handler = handler;
        tileHandler = new TilesetEditorHandler(handler);

        tileDisplay.setHandler(handler);

        tileSelector.init(handler, this);
        tileSelector.updateLayout();
        
        smartGridDisplay.init(handler, true);

        textureDisplay.init(tileHandler, this);
        textureDisplayMaterial.init(tileHandler, this);

        updateJComboBox();

        updateView();
    }

    private void updateJComboBox() {
        Object[] names = new String[handler.getTileset().getMaterials().size()];
        for (int i = 0; i < names.length; i++) {
            names[i] = handler.getTileset().getMaterials().get(i).getImageName();
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel(names);
        jComboBoxListenerActive = false;
        jcbMaterial.setModel(model);

        jcbMaterial.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (index < materialIcons.size() && index >= 0) {
                    label.setIcon(materialIcons.get(index));
                }
                return label;
            }
        });

        if (handler.getTileset().size() > 0) {
            jcbMaterial.setSelectedIndex(handler.getTileSelected().getTextureIDs().get(0));
        }
        jComboBoxListenerActive = true;
    }

    private void updateView() {
        if (handler.getTileset().size() > 0) {
            Tile tile = handler.getTileSelected();

            jtfSizeX.setText(String.valueOf(tile.getWidth()));
            jtfSizeY.setText(String.valueOf(tile.getHeight()));

            jtfNumTextures.setText(String.valueOf(tile.getTextureIDs().size()));

            updateViewXOffset(tile);
            updateViewYOffset(tile);
            updateViewGlobalTexScale(tile);

            jtfObjName.setText(tile.getObjFilename());

            updateViewTileIndex();

            SpinnerNumberModel model = new SpinnerNumberModel(0, 0, tile.getTextureIDs().size() - 1, 1);
            jSpinner1.setModel(model);

            tileHandler.setTextureIdIndexSelected(0);
            textureDisplay.repaint();

            jComboBoxListenerActive = false;
            jcbMaterial.setSelectedItem(tileHandler.getTextureSelectedName());
            jComboBoxListenerActive = true;

            jcbTileableX.setSelected(tile.isXtileable());
            jcbTileableY.setSelected(tile.isYtileable());
            jcbUtileable.setSelected(tile.isUtileable());
            jcbVtileable.setSelected(tile.isVtileable());
            jcbGlobalTexMapping.setSelected(tile.useGlobalTextureMapping());

            updateViewTextNames();

            updateViewMaterialProperties();

            textureDisplayMaterial.repaint();

            //updateViewTextNames();
        }

    }

    private void updateView3DModel() {
        updateSelectedTileThumbnail();

        tileDisplay.requestUpdate();
        tileDisplay.repaint();
        tileSelector.updateTile(handler.getTileIndexSelected());
        tileSelector.repaint();
    }

    private void updateViewXOffset(Tile tile) {
        jtfXOffsetActive.value = false;
        jtfXOffset.setText(String.valueOf(tile.getXOffset()));
        jtfXOffset.setBackground(whiteColor);
        jtfXOffsetActive.value = true;
    }

    private void updateViewYOffset(Tile tile) {
        jtfYOffsetActive.value = false;
        jtfYOffset.setText(String.valueOf(tile.getYOffset()));
        jtfYOffset.setBackground(whiteColor);
        jtfYOffsetActive.value = true;
    }

    private void updateViewGlobalTexScale(Tile tile) {
        jtfGlobalTexScale.setText(String.valueOf(tile.getGlobalTextureScale()));
        boolean enabled = tile.useGlobalTextureMapping();
        jtfGlobalTexScale.setBackground(enabled ? Color.white : Color.lightGray);
        jtfGlobalTexScale.setEditable(enabled);
        jbGlobalTexScale.setEnabled(enabled);
    }

    private void updateViewTexGenMode() {
        jcbTexGenModeListenerActive = false;
        jcbTexGenMode.setSelectedIndex(tileHandler.getMaterialSelected().getTexGenMode());
        jcbTexGenModeListenerActive = true;
    }

    private void updateViewTexTilingU() {
        jcbTexTilingUListenerActive = false;
        jcbTexTilingU.setSelectedIndex(tileHandler.getMaterialSelected().getTexTilingU());
        jcbTexTilingUListenerActive = true;
    }

    private void updateViewTexTilingV() {
        jcbTexTilingVListenerActive = false;
        jcbTexTilingV.setSelectedIndex(tileHandler.getMaterialSelected().getTexTilingV());
        jcbTexTilingVListenerActive = true;
    }

    private void updateViewColorFormat() {
        jcbColorFormatListenerActive = false;
        jcbColorFormat.setSelectedIndex(tileHandler.getMaterialSelected().getColorFormat());
        jcbColorFormatListenerActive = true;
    }

    private void updateViewMaterialProperties() {
        updateViewMaterialName();
        updateViewPaletteNameImd();
        updateViewTextureNameImd();
        updateViewAlpha();
        updateViewTexGenMode();
        updateViewTexTilingU();
        updateViewTexTilingV();
        updateViewColorFormat();
        jcbEnableFog.setSelected(tileHandler.getMaterialSelected().isFogEnabled());
        jcbRenderFrontAndBack.setSelected(tileHandler.getMaterialSelected().renderBothFaces());
        jcbUniformNormal.setSelected(tileHandler.getMaterialSelected().uniformNormalOrientation());
        jcbAlwaysIncludedInImd.setSelected(tileHandler.getMaterialSelected().alwaysIncludeInImd());
        jcbUseVertexColors.setSelected(tileHandler.getMaterialSelected().vertexColorsEnabled());
        jcbL0.setSelected(tileHandler.getMaterialSelected().light0());
        jcbL1.setSelected(tileHandler.getMaterialSelected().light1());
        jcbL2.setSelected(tileHandler.getMaterialSelected().light2());
        jcbL3.setSelected(tileHandler.getMaterialSelected().light3());
        jcbRenderBorder.setSelected(tileHandler.getMaterialSelected().renderBorder());
    }

    public void updateViewTileIndex() {
        jtfIndexTile.setText(String.valueOf(handler.getTileIndexSelected()));
    }

    private void updateViewTextNames() {
        DefaultListModel demoList = new DefaultListModel();
        for (int i = 0; i < handler.getTileset().getMaterials().size(); i++) {
            String textureName = handler.getTileset().getImageName(i);
            demoList.addElement(textureName);
        }
        jlistINames.setSelectedIndex(0);
        jlistINames.setModel(demoList);
        jlistINames.setSelectedIndex(0);

        materialIcons = new ArrayList<>(handler.getTileset().getMaterials().size());
        for (int i = 0; i < handler.getTileset().getMaterials().size(); i++) {
            materialIcons.add(new ImageIcon(new ImageIcon(handler.getTileset().getTextureImg(i)).getImage().getScaledInstance(16, 16, Image.SCALE_DEFAULT)));
        }

        jlistINames.setCellRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (index < materialIcons.size() && index >= 0) {
                    label.setIcon(materialIcons.get(index));
                }
                return label;
            }
        });

    }

    public void updateViewMaterialName() {
        if (jlistINames.getSelectedIndex() != -1) {
            String mName = handler.getTileset().getMaterialName(jlistINames.getSelectedIndex());
            jtfMaterialNameActive.value = false;
            jtfMaterialName.setText(mName);
            jtfMaterialName.setBackground(Color.white);
            jtfMaterialNameActive.value = true;
        }
    }

    private void updateViewPaletteNameImd() {
        if (jlistINames.getSelectedIndex() != -1) {
            String pName = handler.getTileset().getPaletteNameImd(jlistINames.getSelectedIndex());
            jtfPaletteNameActive.value = false;
            jtfPaletteName.setText(pName);
            jtfPaletteName.setBackground(Color.white);
            jtfPaletteNameActive.value = true;
        }
    }

    private void updateViewTextureNameImd() {
        if (jlistINames.getSelectedIndex() != -1) {
            String tName = handler.getTileset().getTextureNameImd(jlistINames.getSelectedIndex());
            jtfTextureNameActive.value = false;
            jtfTextureName.setText(tName);
            jtfTextureName.setBackground(Color.white);
            jtfTextureNameActive.value = true;
        }
    }

    private void updateViewAlpha() {
        jsAlphaActive = false;
        if (jlistINames.getSelectedIndex() != -1) {
            jSpinner2.setValue(tileHandler.getMaterialSelected().getAlpha());
        }
        jsAlphaActive = true;
    }

    private void updateViewTexture() {
        textureDisplay.repaint();
        tileDisplay.repaint();
        tileSelector.repaint();
        //TODO: Update texture and repaint tileselector
    }

    private void updateSelectedTileThumbnail() {
        updateTileThumbnail(handler.getTileIndexSelected());

        tileDisplay.requestUpdate();
    }

    private void updateTileThumbnails(ArrayList<Integer> indicesTiles) {
        GLContext context = tileDisplay.getContext();

        TilesetRenderer tr = new TilesetRenderer(handler.getTileset());
        for (int i = 0; i < indicesTiles.size(); i++) {
            tr.renderTileThumbnail(indicesTiles.get(i));
        }
        tr.destroy();
        tileDisplay.setContext(context, false);
        tileDisplay.requestUpdate();
    }

    public void replaceMaterial() {
        final ReplaceMaterialDialog dialog = new ReplaceMaterialDialog(handler.getMainFrame(), true);
        dialog.init(handler, tileHandler, this);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        if (dialog.getReturnValue() == ReplaceMaterialDialog.APPROVE_OPTION) {
            int newIndex = dialog.getIndexSelected();
            ArrayList<Integer> indicesTilesReplaced = handler.getTileset().replaceMaterial(tileHandler.getMaterialIndexSelected(), newIndex);

            updateTileThumbnails(indicesTilesReplaced);
            tileSelector.updateLayout();
            tileDisplay.requestUpdate();

            updateJComboBox();
            updateView();
            updateViewTexture();

            //tileHandler.setMaterialIndexSelected(newIndex);
        }

    }

    private void replaceTextureWithDialog() {
        final ThumbnailFileChooser fc = new ThumbnailFileChooser(); //Check for a better alternative
        if (handler.getLastTilesetDirectoryUsed() != null) {
            fc.setCurrentDirectory(new File(handler.getLastTilesetDirectoryUsed()));
        }
        fc.setFileFilter(new FileNameExtensionFilter("Portable Network Graphics (*.PNG)", "png"));
        fc.setApproveButtonText("Open");
        fc.setDialogTitle("Open New Texture Image");
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            handler.setLastTilesetDirectoryUsed(fc.getSelectedFile().getParent());

            String path = file.getAbsolutePath();
            replaceTexture(tileHandler.getMaterialIndexSelected(), path);
            /*
            try {
                boolean textureAdded = handler.getTileset().replaceTexture(tileHandler.getMaterialIndexSelected(), path);
                if (textureAdded) {
                    //Calculate tiles that have to be updated
                    ArrayList<Integer> tileIndsToUpdate = new ArrayList<>();
                    for (int i = 0; i < handler.getTileset().size(); i++) {
                        Tile t = handler.getTileset().get(i);
                        for (int j = 0; j < t.getTextureIDs().size(); j++) {
                            int id = t.getTextureIDs().get(j);
                            if (id == tileHandler.getMaterialIndexSelected()) {
                                tileIndsToUpdate.add(i);
                            }
                        }
                    }
                    updateJComboBox();
                    updateViewTextNames();
                    tileDisplay.requestUpdate();
                    tileDisplay.repaint();

                    tileHandler.updateTileThumnails(tileIndsToUpdate);
                    tileSelector.updateTiles(tileIndsToUpdate);
                    tileSelector.repaint();
                    textureDisplay.repaint();
                } else {
                    JOptionPane.showMessageDialog(this,
                            "A texture with the same name is already in the tileset",
                            "Texture already loaded", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                        "There was a problem loading the image",
                        "Error opening image", JOptionPane.ERROR_MESSAGE);
            }
             */
        }
    }

    public void replaceTexture(int textureIndex, String path) {
        try {
            boolean textureAdded = handler.getTileset().replaceTexture(textureIndex, path);
            if (textureAdded) {
                //Calculate tiles that have to be updated
                ArrayList<Integer> tileIndsToUpdate = new ArrayList<>();
                for (int i = 0; i < handler.getTileset().size(); i++) {
                    Tile t = handler.getTileset().get(i);
                    for (int j = 0; j < t.getTextureIDs().size(); j++) {
                        int id = t.getTextureIDs().get(j);
                        if (id == textureIndex) {
                            tileIndsToUpdate.add(i);
                        }
                    }
                }
                updateJComboBox();
                updateViewTextNames();
                tileDisplay.requestUpdate();
                tileDisplay.repaint();

                updateTileThumbnails(0, handler.getTileset().size());
                //tileHandler.updateTileThumnails(tileIndsToUpdate);
                tileSelector.updateTiles(tileIndsToUpdate);
                tileSelector.repaint();
                textureDisplay.repaint();
            } else {
                JOptionPane.showMessageDialog(this,
                        "A texture with the same name is already in the tileset",
                        "Texture already loaded", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "There was a problem loading the image",
                    "Error opening image", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void changeGlobalTexScale() {
        float value;
        try {
            value = Float.valueOf(jtfGlobalTexScale.getText());
        } catch (NumberFormatException e) {
            value = handler.getTileSelected().getGlobalTextureScale();
        }
        handler.getTileSelected().setGlobalTextureScale(value);
        jtfGlobalTexScale.setText(String.valueOf(value));
        jtfGlobalTexScaleActive.value = false;
        jtfGlobalTexScale.setBackground(greenColor);
        jtfGlobalTexScaleActive.value = true;
    }

    private void changeXOffset() {
        float value;
        try {
            value = Float.valueOf(jtfXOffset.getText());
        } catch (NumberFormatException e) {
            value = handler.getTileSelected().getXOffset();
        }
        handler.getTileSelected().setXOffset(value);
        jtfXOffset.setText(String.valueOf(value));
        jtfXOffsetActive.value = false;
        jtfXOffset.setBackground(greenColor);
        jtfXOffsetActive.value = true;
    }

    private void changeYOffset() {
        float value;
        try {
            value = Float.valueOf(jtfYOffset.getText());
        } catch (NumberFormatException e) {
            value = handler.getTileSelected().getYOffset();
        }
        handler.getTileSelected().setYOffset(value);
        jtfYOffset.setText(String.valueOf(value));
        jtfYOffsetActive.value = false;
        jtfYOffset.setBackground(greenColor);
        jtfYOffsetActive.value = true;
    }

    private void changeMaterialName() {
        String mName = jtfMaterialName.getText();
        int index = jlistINames.getSelectedIndex();
        handler.getTileset().setMaterialName(index, mName);

        jtfMaterialNameActive.value = false;
        jtfMaterialName.setBackground(greenColor);
        jtfMaterialNameActive.value = true;
    }

    private void changePaletteNameImd() {
        String pName = jtfPaletteName.getText();
        int index = jlistINames.getSelectedIndex();
        handler.getTileset().setPaletteNameImd(index, pName);

        jtfPaletteNameActive.value = false;
        jtfPaletteName.setBackground(greenColor);
        jtfPaletteNameActive.value = true;
    }

    private void changeTextureNameImd() {
        String tName = jtfTextureName.getText();
        int index = jlistINames.getSelectedIndex();
        handler.getTileset().setTextureNameImd(index, tName);

        jtfTextureNameActive.value = false;
        jtfTextureName.setBackground(greenColor);
        jtfTextureNameActive.value = true;
    }

    public void fixIndices() {
        int[] indices = tileHandler.getChangeIndices();
        tileHandler.fixMapGridIndices(indices);
        tileHandler.fixTilesetGridIndices(indices);
    }

    public TileDisplay getTileDisplay() {
        return tileDisplay;
    }

    private void updateTileThumbnail(int index) {
        GLContext context = tileDisplay.getContext();
        TilesetRenderer tr = new TilesetRenderer(handler.getTileset());
        tr.renderTileThumbnail(index);
        tr.destroy();
        tileDisplay.setContext(context, false);
    }

    private void updateTileThumbnails(int start, int end) {
        GLContext context = tileDisplay.getContext();
        TilesetRenderer tr = new TilesetRenderer(handler.getTileset());
        for (int i = start; i < end; i++) {
            tr.renderTileThumbnail(i);
        }
        tr.destroy();
        tileDisplay.setContext(context, false);
    }

    private void addListenerToJTextField(JTextField jtf, MutableBoolean enabled) {
        jtf.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                changeBackground();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                changeBackground();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                changeBackground();
            }

            public void changeBackground() {
                if (enabled.value) {
                    jtf.setBackground(redColor);
                }
            }
        });
    }

    private class MutableBoolean {

        public boolean value;

        public MutableBoolean(boolean value) {
            this.value = value;
        }
    };

}
