/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.gameselector;

import editor.TilesetRenderer;
import editor.game.Game;
import editor.handler.MapEditorHandler;
import editor.smartdrawing.SmartGrid;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import tileset.TextureNotFoundException;
import tileset.Tileset;
import tileset.TilesetIO;
import utils.Utils;

/**
 *
 * @author Trifindo
 */
public class GameSelectorDialog extends javax.swing.JDialog {

    private MapEditorHandler handler;
    public static final int ACEPTED = 0, CANCELED = 1;
    private int returnValue = CANCELED;
    private int newGame = Game.DIAMOND;

    private static final String[] defaultTsetsFolderPaths = new String[]{
        "/tilesets/dp",
        "/tilesets/pt",
        "/tilesets/hgss",
        "/tilesets/bw"
    };

    private static final String[] defaultTsetsNames = new String[]{
        "DiamondPearlTileset.pdsts",
        "PlatinumTileset.pdsts",
        "HeartGoldSoulSilverTileset.pdsts",
        "BlackWhiteTileset.pdsts"
    };

    /**
     * Creates new form GameSelectorDialog
     */
    public GameSelectorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        

        jScrollPane1.getVerticalScrollBar().setUnitIncrement(16);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcbGame = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcbTileList = new javax.swing.JComboBox<>();
        jpanelIcon = new javax.swing.JPanel();
        jlGameIcon = new javax.swing.JLabel();
        jbFinish = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tilesetThumbnailDisplay1 = new TilesetThumbnailDisplay();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("New Map - Select Game");
        setResizable(false);

        jcbGame.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pokemon Diamond", "Pokemon Pearl", "Pokemon Platinum", "Pokemon Heart Gold", "Pokemon Soul Silver", "Pokemon Black", "Pokemon White", "Pokemon Black 2", "Pokemon White 2" }));
        jcbGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbGameActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Game for this Map: ");

        jLabel2.setText("Use Predesigned Tileset: ");
        jLabel2.setToolTipText("");

        jcbTileList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pokemon Diamond / Pearl", "Pokemon Platinum", "Pokemon Heart Gold / Soul Silver", "Pokemon Black / White", "None" }));
        jcbTileList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTileListActionPerformed(evt);
            }
        });

        jpanelIcon.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jlGameIcon.setMaximumSize(new java.awt.Dimension(32, 32));
        jlGameIcon.setMinimumSize(new java.awt.Dimension(32, 32));
        jlGameIcon.setPreferredSize(new java.awt.Dimension(32, 32));

        javax.swing.GroupLayout jpanelIconLayout = new javax.swing.GroupLayout(jpanelIcon);
        jpanelIcon.setLayout(jpanelIconLayout);
        jpanelIconLayout.setHorizontalGroup(
            jpanelIconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelIconLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlGameIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpanelIconLayout.setVerticalGroup(
            jpanelIconLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelIconLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlGameIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbFinish.setText("Finish");
        jbFinish.setToolTipText("");
        jbFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFinishActionPerformed(evt);
            }
        });

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        jLabel3.setText("Tileset Preview: ");

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tilesetThumbnailDisplay1.setMaximumSize(new java.awt.Dimension(128, 32767));
        tilesetThumbnailDisplay1.setMinimumSize(new java.awt.Dimension(128, 100));
        tilesetThumbnailDisplay1.setPreferredSize(new java.awt.Dimension(128, 137));

        javax.swing.GroupLayout tilesetThumbnailDisplay1Layout = new javax.swing.GroupLayout(tilesetThumbnailDisplay1);
        tilesetThumbnailDisplay1.setLayout(tilesetThumbnailDisplay1Layout);
        tilesetThumbnailDisplay1Layout.setHorizontalGroup(
            tilesetThumbnailDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 128, Short.MAX_VALUE)
        );
        tilesetThumbnailDisplay1Layout.setVerticalGroup(
            tilesetThumbnailDisplay1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 190, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(tilesetThumbnailDisplay1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jcbTileList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jcbGame, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jpanelIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jcbGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jcbTileList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jpanelIcon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbFinish)
                    .addComponent(jbCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbGameActionPerformed
        newGame = jcbGame.getSelectedIndex();
        //handler.setGameIndex(jComboBox1.getSelectedIndex());
        updateViewGameIcon();
    }//GEN-LAST:event_jcbGameActionPerformed

    private void jbFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFinishActionPerformed
        handler.setGameIndex(newGame);

        Tileset tileset;
        int tilesetIndex = jcbTileList.getSelectedIndex();
        if (tilesetIndex < 4) {
            try {
                //MainFrame.class.getClassLoader().getResourceAsStream(filename)
                tileset = TilesetIO.readTilesetFromFileAsResource(
                        defaultTsetsFolderPaths[tilesetIndex] + "/"
                        + defaultTsetsNames[tilesetIndex]);

                TilesetRenderer tr = new TilesetRenderer(tileset);
                try {
                    tr.renderTiles();
                } catch (NullPointerException e) {

                }
                tr.destroy();
            } catch (NullPointerException | TextureNotFoundException | IOException ex) {
                System.out.println("Tileset not found");
                tileset = new Tileset();
                tileset.getSmartGridArray().add(new SmartGrid());
            }
        } else {
            tileset = new Tileset();
            tileset.getSmartGridArray().add(new SmartGrid());
        }
        handler.setTileset(tileset);

        returnValue = ACEPTED;
        dispose();
    }//GEN-LAST:event_jbFinishActionPerformed

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        returnValue = CANCELED;
        dispose();
    }//GEN-LAST:event_jbCancelActionPerformed

    private void jcbTileListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTileListActionPerformed
        int tilesetIndex = jcbTileList.getSelectedIndex();

        loadTilesetThumbnail(tilesetIndex);
    }//GEN-LAST:event_jcbTileListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameSelectorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameSelectorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameSelectorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameSelectorDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GameSelectorDialog dialog = new GameSelectorDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbFinish;
    private javax.swing.JComboBox<String> jcbGame;
    private javax.swing.JComboBox<String> jcbTileList;
    private javax.swing.JLabel jlGameIcon;
    private javax.swing.JPanel jpanelIcon;
    private TilesetThumbnailDisplay tilesetThumbnailDisplay1;
    // End of variables declaration//GEN-END:variables

    public void init(MapEditorHandler handler) {
        this.handler = handler;
        updateViewGameIcon();
        loadTilesetThumbnail(0);
    }

    public void updateViewGameIcon() {
        jlGameIcon.setIcon(new ImageIcon(handler.getGame().gameIcons[newGame]));
    }

    public int getReturnValue() {
        return returnValue;
    }

    private void loadTilesetThumbnail(int tilesetIndex) {
        BufferedImage img;
        try {
            img = Utils.loadImageAsResource(defaultTsetsFolderPaths[tilesetIndex] + "/" + "TilesetThumbnail.png");
            tilesetThumbnailDisplay1.setImage(img);
            tilesetThumbnailDisplay1.repaint();
        } catch (IOException | IndexOutOfBoundsException ex) {
            tilesetThumbnailDisplay1.setImage(null);
            tilesetThumbnailDisplay1.repaint();
        }

    }
}
